
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Criminal
 * 
 */
export type Criminal = $Result.DefaultSelection<Prisma.$CriminalPayload>
/**
 * Model Personal
 * 
 */
export type Personal = $Result.DefaultSelection<Prisma.$PersonalPayload>
/**
 * Model Delito
 * 
 */
export type Delito = $Result.DefaultSelection<Prisma.$DelitoPayload>
/**
 * Model Celda
 * 
 */
export type Celda = $Result.DefaultSelection<Prisma.$CeldaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Criminals
 * const criminals = await prisma.criminal.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Criminals
   * const criminals = await prisma.criminal.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.criminal`: Exposes CRUD operations for the **Criminal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Criminals
    * const criminals = await prisma.criminal.findMany()
    * ```
    */
  get criminal(): Prisma.CriminalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personal`: Exposes CRUD operations for the **Personal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personals
    * const personals = await prisma.personal.findMany()
    * ```
    */
  get personal(): Prisma.PersonalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.delito`: Exposes CRUD operations for the **Delito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Delitos
    * const delitos = await prisma.delito.findMany()
    * ```
    */
  get delito(): Prisma.DelitoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.celda`: Exposes CRUD operations for the **Celda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Celdas
    * const celdas = await prisma.celda.findMany()
    * ```
    */
  get celda(): Prisma.CeldaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.0
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Criminal: 'Criminal',
    Personal: 'Personal',
    Delito: 'Delito',
    Celda: 'Celda'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "criminal" | "personal" | "delito" | "celda"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Criminal: {
        payload: Prisma.$CriminalPayload<ExtArgs>
        fields: Prisma.CriminalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CriminalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CriminalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>
          }
          findFirst: {
            args: Prisma.CriminalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CriminalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>
          }
          findMany: {
            args: Prisma.CriminalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>[]
          }
          create: {
            args: Prisma.CriminalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>
          }
          createMany: {
            args: Prisma.CriminalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CriminalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>[]
          }
          delete: {
            args: Prisma.CriminalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>
          }
          update: {
            args: Prisma.CriminalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>
          }
          deleteMany: {
            args: Prisma.CriminalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CriminalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CriminalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>[]
          }
          upsert: {
            args: Prisma.CriminalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriminalPayload>
          }
          aggregate: {
            args: Prisma.CriminalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCriminal>
          }
          groupBy: {
            args: Prisma.CriminalGroupByArgs<ExtArgs>
            result: $Utils.Optional<CriminalGroupByOutputType>[]
          }
          count: {
            args: Prisma.CriminalCountArgs<ExtArgs>
            result: $Utils.Optional<CriminalCountAggregateOutputType> | number
          }
        }
      }
      Personal: {
        payload: Prisma.$PersonalPayload<ExtArgs>
        fields: Prisma.PersonalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          findFirst: {
            args: Prisma.PersonalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          findMany: {
            args: Prisma.PersonalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>[]
          }
          create: {
            args: Prisma.PersonalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          createMany: {
            args: Prisma.PersonalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>[]
          }
          delete: {
            args: Prisma.PersonalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          update: {
            args: Prisma.PersonalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          deleteMany: {
            args: Prisma.PersonalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>[]
          }
          upsert: {
            args: Prisma.PersonalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalPayload>
          }
          aggregate: {
            args: Prisma.PersonalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonal>
          }
          groupBy: {
            args: Prisma.PersonalGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonalGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalCountArgs<ExtArgs>
            result: $Utils.Optional<PersonalCountAggregateOutputType> | number
          }
        }
      }
      Delito: {
        payload: Prisma.$DelitoPayload<ExtArgs>
        fields: Prisma.DelitoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DelitoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DelitoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>
          }
          findFirst: {
            args: Prisma.DelitoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DelitoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>
          }
          findMany: {
            args: Prisma.DelitoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>[]
          }
          create: {
            args: Prisma.DelitoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>
          }
          createMany: {
            args: Prisma.DelitoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DelitoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>[]
          }
          delete: {
            args: Prisma.DelitoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>
          }
          update: {
            args: Prisma.DelitoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>
          }
          deleteMany: {
            args: Prisma.DelitoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DelitoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DelitoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>[]
          }
          upsert: {
            args: Prisma.DelitoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DelitoPayload>
          }
          aggregate: {
            args: Prisma.DelitoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDelito>
          }
          groupBy: {
            args: Prisma.DelitoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DelitoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DelitoCountArgs<ExtArgs>
            result: $Utils.Optional<DelitoCountAggregateOutputType> | number
          }
        }
      }
      Celda: {
        payload: Prisma.$CeldaPayload<ExtArgs>
        fields: Prisma.CeldaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CeldaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CeldaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>
          }
          findFirst: {
            args: Prisma.CeldaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CeldaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>
          }
          findMany: {
            args: Prisma.CeldaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>[]
          }
          create: {
            args: Prisma.CeldaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>
          }
          createMany: {
            args: Prisma.CeldaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CeldaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>[]
          }
          delete: {
            args: Prisma.CeldaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>
          }
          update: {
            args: Prisma.CeldaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>
          }
          deleteMany: {
            args: Prisma.CeldaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CeldaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CeldaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>[]
          }
          upsert: {
            args: Prisma.CeldaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CeldaPayload>
          }
          aggregate: {
            args: Prisma.CeldaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCelda>
          }
          groupBy: {
            args: Prisma.CeldaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CeldaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CeldaCountArgs<ExtArgs>
            result: $Utils.Optional<CeldaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    criminal?: CriminalOmit
    personal?: PersonalOmit
    delito?: DelitoOmit
    celda?: CeldaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CriminalCountOutputType
   */

  export type CriminalCountOutputType = {
    delitos: number
  }

  export type CriminalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    delitos?: boolean | CriminalCountOutputTypeCountDelitosArgs
  }

  // Custom InputTypes
  /**
   * CriminalCountOutputType without action
   */
  export type CriminalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CriminalCountOutputType
     */
    select?: CriminalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CriminalCountOutputType without action
   */
  export type CriminalCountOutputTypeCountDelitosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DelitoWhereInput
  }


  /**
   * Count Type PersonalCountOutputType
   */

  export type PersonalCountOutputType = {
    criminales: number
  }

  export type PersonalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminales?: boolean | PersonalCountOutputTypeCountCriminalesArgs
  }

  // Custom InputTypes
  /**
   * PersonalCountOutputType without action
   */
  export type PersonalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalCountOutputType
     */
    select?: PersonalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonalCountOutputType without action
   */
  export type PersonalCountOutputTypeCountCriminalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CriminalWhereInput
  }


  /**
   * Count Type CeldaCountOutputType
   */

  export type CeldaCountOutputType = {
    criminales: number
  }

  export type CeldaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminales?: boolean | CeldaCountOutputTypeCountCriminalesArgs
  }

  // Custom InputTypes
  /**
   * CeldaCountOutputType without action
   */
  export type CeldaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CeldaCountOutputType
     */
    select?: CeldaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CeldaCountOutputType without action
   */
  export type CeldaCountOutputTypeCountCriminalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CriminalWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Criminal
   */

  export type AggregateCriminal = {
    _count: CriminalCountAggregateOutputType | null
    _avg: CriminalAvgAggregateOutputType | null
    _sum: CriminalSumAggregateOutputType | null
    _min: CriminalMinAggregateOutputType | null
    _max: CriminalMaxAggregateOutputType | null
  }

  export type CriminalAvgAggregateOutputType = {
    id: number | null
    edad: number | null
    personal_asignado: number | null
    celda: number | null
  }

  export type CriminalSumAggregateOutputType = {
    id: number | null
    edad: number | null
    personal_asignado: number | null
    celda: number | null
  }

  export type CriminalMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    apodo: string | null
    edad: number | null
    genero: string | null
    tratamiento: string | null
    peligrosidad: string | null
    personal_asignado: number | null
    celda: number | null
    foto: string | null
  }

  export type CriminalMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    apodo: string | null
    edad: number | null
    genero: string | null
    tratamiento: string | null
    peligrosidad: string | null
    personal_asignado: number | null
    celda: number | null
    foto: string | null
  }

  export type CriminalCountAggregateOutputType = {
    id: number
    nombre: number
    apodo: number
    edad: number
    genero: number
    tratamiento: number
    peligrosidad: number
    personal_asignado: number
    celda: number
    foto: number
    _all: number
  }


  export type CriminalAvgAggregateInputType = {
    id?: true
    edad?: true
    personal_asignado?: true
    celda?: true
  }

  export type CriminalSumAggregateInputType = {
    id?: true
    edad?: true
    personal_asignado?: true
    celda?: true
  }

  export type CriminalMinAggregateInputType = {
    id?: true
    nombre?: true
    apodo?: true
    edad?: true
    genero?: true
    tratamiento?: true
    peligrosidad?: true
    personal_asignado?: true
    celda?: true
    foto?: true
  }

  export type CriminalMaxAggregateInputType = {
    id?: true
    nombre?: true
    apodo?: true
    edad?: true
    genero?: true
    tratamiento?: true
    peligrosidad?: true
    personal_asignado?: true
    celda?: true
    foto?: true
  }

  export type CriminalCountAggregateInputType = {
    id?: true
    nombre?: true
    apodo?: true
    edad?: true
    genero?: true
    tratamiento?: true
    peligrosidad?: true
    personal_asignado?: true
    celda?: true
    foto?: true
    _all?: true
  }

  export type CriminalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Criminal to aggregate.
     */
    where?: CriminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criminals to fetch.
     */
    orderBy?: CriminalOrderByWithRelationInput | CriminalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CriminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criminals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criminals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Criminals
    **/
    _count?: true | CriminalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CriminalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CriminalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CriminalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CriminalMaxAggregateInputType
  }

  export type GetCriminalAggregateType<T extends CriminalAggregateArgs> = {
        [P in keyof T & keyof AggregateCriminal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCriminal[P]>
      : GetScalarType<T[P], AggregateCriminal[P]>
  }




  export type CriminalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CriminalWhereInput
    orderBy?: CriminalOrderByWithAggregationInput | CriminalOrderByWithAggregationInput[]
    by: CriminalScalarFieldEnum[] | CriminalScalarFieldEnum
    having?: CriminalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CriminalCountAggregateInputType | true
    _avg?: CriminalAvgAggregateInputType
    _sum?: CriminalSumAggregateInputType
    _min?: CriminalMinAggregateInputType
    _max?: CriminalMaxAggregateInputType
  }

  export type CriminalGroupByOutputType = {
    id: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    personal_asignado: number | null
    celda: number | null
    foto: string | null
    _count: CriminalCountAggregateOutputType | null
    _avg: CriminalAvgAggregateOutputType | null
    _sum: CriminalSumAggregateOutputType | null
    _min: CriminalMinAggregateOutputType | null
    _max: CriminalMaxAggregateOutputType | null
  }

  type GetCriminalGroupByPayload<T extends CriminalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CriminalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CriminalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CriminalGroupByOutputType[P]>
            : GetScalarType<T[P], CriminalGroupByOutputType[P]>
        }
      >
    >


  export type CriminalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apodo?: boolean
    edad?: boolean
    genero?: boolean
    tratamiento?: boolean
    peligrosidad?: boolean
    personal_asignado?: boolean
    celda?: boolean
    foto?: boolean
    personal?: boolean | Criminal$personalArgs<ExtArgs>
    delitos?: boolean | Criminal$delitosArgs<ExtArgs>
    celda_info?: boolean | Criminal$celda_infoArgs<ExtArgs>
    _count?: boolean | CriminalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["criminal"]>

  export type CriminalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apodo?: boolean
    edad?: boolean
    genero?: boolean
    tratamiento?: boolean
    peligrosidad?: boolean
    personal_asignado?: boolean
    celda?: boolean
    foto?: boolean
    personal?: boolean | Criminal$personalArgs<ExtArgs>
    celda_info?: boolean | Criminal$celda_infoArgs<ExtArgs>
  }, ExtArgs["result"]["criminal"]>

  export type CriminalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apodo?: boolean
    edad?: boolean
    genero?: boolean
    tratamiento?: boolean
    peligrosidad?: boolean
    personal_asignado?: boolean
    celda?: boolean
    foto?: boolean
    personal?: boolean | Criminal$personalArgs<ExtArgs>
    celda_info?: boolean | Criminal$celda_infoArgs<ExtArgs>
  }, ExtArgs["result"]["criminal"]>

  export type CriminalSelectScalar = {
    id?: boolean
    nombre?: boolean
    apodo?: boolean
    edad?: boolean
    genero?: boolean
    tratamiento?: boolean
    peligrosidad?: boolean
    personal_asignado?: boolean
    celda?: boolean
    foto?: boolean
  }

  export type CriminalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "apodo" | "edad" | "genero" | "tratamiento" | "peligrosidad" | "personal_asignado" | "celda" | "foto", ExtArgs["result"]["criminal"]>
  export type CriminalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personal?: boolean | Criminal$personalArgs<ExtArgs>
    delitos?: boolean | Criminal$delitosArgs<ExtArgs>
    celda_info?: boolean | Criminal$celda_infoArgs<ExtArgs>
    _count?: boolean | CriminalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CriminalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personal?: boolean | Criminal$personalArgs<ExtArgs>
    celda_info?: boolean | Criminal$celda_infoArgs<ExtArgs>
  }
  export type CriminalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personal?: boolean | Criminal$personalArgs<ExtArgs>
    celda_info?: boolean | Criminal$celda_infoArgs<ExtArgs>
  }

  export type $CriminalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Criminal"
    objects: {
      personal: Prisma.$PersonalPayload<ExtArgs> | null
      delitos: Prisma.$DelitoPayload<ExtArgs>[]
      celda_info: Prisma.$CeldaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      apodo: string
      edad: number
      genero: string
      tratamiento: string
      peligrosidad: string
      personal_asignado: number | null
      celda: number | null
      foto: string | null
    }, ExtArgs["result"]["criminal"]>
    composites: {}
  }

  type CriminalGetPayload<S extends boolean | null | undefined | CriminalDefaultArgs> = $Result.GetResult<Prisma.$CriminalPayload, S>

  type CriminalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CriminalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CriminalCountAggregateInputType | true
    }

  export interface CriminalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Criminal'], meta: { name: 'Criminal' } }
    /**
     * Find zero or one Criminal that matches the filter.
     * @param {CriminalFindUniqueArgs} args - Arguments to find a Criminal
     * @example
     * // Get one Criminal
     * const criminal = await prisma.criminal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CriminalFindUniqueArgs>(args: SelectSubset<T, CriminalFindUniqueArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Criminal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CriminalFindUniqueOrThrowArgs} args - Arguments to find a Criminal
     * @example
     * // Get one Criminal
     * const criminal = await prisma.criminal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CriminalFindUniqueOrThrowArgs>(args: SelectSubset<T, CriminalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Criminal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalFindFirstArgs} args - Arguments to find a Criminal
     * @example
     * // Get one Criminal
     * const criminal = await prisma.criminal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CriminalFindFirstArgs>(args?: SelectSubset<T, CriminalFindFirstArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Criminal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalFindFirstOrThrowArgs} args - Arguments to find a Criminal
     * @example
     * // Get one Criminal
     * const criminal = await prisma.criminal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CriminalFindFirstOrThrowArgs>(args?: SelectSubset<T, CriminalFindFirstOrThrowArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Criminals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Criminals
     * const criminals = await prisma.criminal.findMany()
     * 
     * // Get first 10 Criminals
     * const criminals = await prisma.criminal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const criminalWithIdOnly = await prisma.criminal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CriminalFindManyArgs>(args?: SelectSubset<T, CriminalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Criminal.
     * @param {CriminalCreateArgs} args - Arguments to create a Criminal.
     * @example
     * // Create one Criminal
     * const Criminal = await prisma.criminal.create({
     *   data: {
     *     // ... data to create a Criminal
     *   }
     * })
     * 
     */
    create<T extends CriminalCreateArgs>(args: SelectSubset<T, CriminalCreateArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Criminals.
     * @param {CriminalCreateManyArgs} args - Arguments to create many Criminals.
     * @example
     * // Create many Criminals
     * const criminal = await prisma.criminal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CriminalCreateManyArgs>(args?: SelectSubset<T, CriminalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Criminals and returns the data saved in the database.
     * @param {CriminalCreateManyAndReturnArgs} args - Arguments to create many Criminals.
     * @example
     * // Create many Criminals
     * const criminal = await prisma.criminal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Criminals and only return the `id`
     * const criminalWithIdOnly = await prisma.criminal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CriminalCreateManyAndReturnArgs>(args?: SelectSubset<T, CriminalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Criminal.
     * @param {CriminalDeleteArgs} args - Arguments to delete one Criminal.
     * @example
     * // Delete one Criminal
     * const Criminal = await prisma.criminal.delete({
     *   where: {
     *     // ... filter to delete one Criminal
     *   }
     * })
     * 
     */
    delete<T extends CriminalDeleteArgs>(args: SelectSubset<T, CriminalDeleteArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Criminal.
     * @param {CriminalUpdateArgs} args - Arguments to update one Criminal.
     * @example
     * // Update one Criminal
     * const criminal = await prisma.criminal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CriminalUpdateArgs>(args: SelectSubset<T, CriminalUpdateArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Criminals.
     * @param {CriminalDeleteManyArgs} args - Arguments to filter Criminals to delete.
     * @example
     * // Delete a few Criminals
     * const { count } = await prisma.criminal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CriminalDeleteManyArgs>(args?: SelectSubset<T, CriminalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Criminals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Criminals
     * const criminal = await prisma.criminal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CriminalUpdateManyArgs>(args: SelectSubset<T, CriminalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Criminals and returns the data updated in the database.
     * @param {CriminalUpdateManyAndReturnArgs} args - Arguments to update many Criminals.
     * @example
     * // Update many Criminals
     * const criminal = await prisma.criminal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Criminals and only return the `id`
     * const criminalWithIdOnly = await prisma.criminal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CriminalUpdateManyAndReturnArgs>(args: SelectSubset<T, CriminalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Criminal.
     * @param {CriminalUpsertArgs} args - Arguments to update or create a Criminal.
     * @example
     * // Update or create a Criminal
     * const criminal = await prisma.criminal.upsert({
     *   create: {
     *     // ... data to create a Criminal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Criminal we want to update
     *   }
     * })
     */
    upsert<T extends CriminalUpsertArgs>(args: SelectSubset<T, CriminalUpsertArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Criminals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalCountArgs} args - Arguments to filter Criminals to count.
     * @example
     * // Count the number of Criminals
     * const count = await prisma.criminal.count({
     *   where: {
     *     // ... the filter for the Criminals we want to count
     *   }
     * })
    **/
    count<T extends CriminalCountArgs>(
      args?: Subset<T, CriminalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CriminalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Criminal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CriminalAggregateArgs>(args: Subset<T, CriminalAggregateArgs>): Prisma.PrismaPromise<GetCriminalAggregateType<T>>

    /**
     * Group by Criminal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriminalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CriminalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CriminalGroupByArgs['orderBy'] }
        : { orderBy?: CriminalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CriminalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCriminalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Criminal model
   */
  readonly fields: CriminalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Criminal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CriminalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personal<T extends Criminal$personalArgs<ExtArgs> = {}>(args?: Subset<T, Criminal$personalArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    delitos<T extends Criminal$delitosArgs<ExtArgs> = {}>(args?: Subset<T, Criminal$delitosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    celda_info<T extends Criminal$celda_infoArgs<ExtArgs> = {}>(args?: Subset<T, Criminal$celda_infoArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Criminal model
   */ 
  interface CriminalFieldRefs {
    readonly id: FieldRef<"Criminal", 'Int'>
    readonly nombre: FieldRef<"Criminal", 'String'>
    readonly apodo: FieldRef<"Criminal", 'String'>
    readonly edad: FieldRef<"Criminal", 'Int'>
    readonly genero: FieldRef<"Criminal", 'String'>
    readonly tratamiento: FieldRef<"Criminal", 'String'>
    readonly peligrosidad: FieldRef<"Criminal", 'String'>
    readonly personal_asignado: FieldRef<"Criminal", 'Int'>
    readonly celda: FieldRef<"Criminal", 'Int'>
    readonly foto: FieldRef<"Criminal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Criminal findUnique
   */
  export type CriminalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * Filter, which Criminal to fetch.
     */
    where: CriminalWhereUniqueInput
  }

  /**
   * Criminal findUniqueOrThrow
   */
  export type CriminalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * Filter, which Criminal to fetch.
     */
    where: CriminalWhereUniqueInput
  }

  /**
   * Criminal findFirst
   */
  export type CriminalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * Filter, which Criminal to fetch.
     */
    where?: CriminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criminals to fetch.
     */
    orderBy?: CriminalOrderByWithRelationInput | CriminalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Criminals.
     */
    cursor?: CriminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criminals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criminals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Criminals.
     */
    distinct?: CriminalScalarFieldEnum | CriminalScalarFieldEnum[]
  }

  /**
   * Criminal findFirstOrThrow
   */
  export type CriminalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * Filter, which Criminal to fetch.
     */
    where?: CriminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criminals to fetch.
     */
    orderBy?: CriminalOrderByWithRelationInput | CriminalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Criminals.
     */
    cursor?: CriminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criminals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criminals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Criminals.
     */
    distinct?: CriminalScalarFieldEnum | CriminalScalarFieldEnum[]
  }

  /**
   * Criminal findMany
   */
  export type CriminalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * Filter, which Criminals to fetch.
     */
    where?: CriminalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criminals to fetch.
     */
    orderBy?: CriminalOrderByWithRelationInput | CriminalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Criminals.
     */
    cursor?: CriminalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criminals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criminals.
     */
    skip?: number
    distinct?: CriminalScalarFieldEnum | CriminalScalarFieldEnum[]
  }

  /**
   * Criminal create
   */
  export type CriminalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * The data needed to create a Criminal.
     */
    data: XOR<CriminalCreateInput, CriminalUncheckedCreateInput>
  }

  /**
   * Criminal createMany
   */
  export type CriminalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Criminals.
     */
    data: CriminalCreateManyInput | CriminalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Criminal createManyAndReturn
   */
  export type CriminalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * The data used to create many Criminals.
     */
    data: CriminalCreateManyInput | CriminalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Criminal update
   */
  export type CriminalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * The data needed to update a Criminal.
     */
    data: XOR<CriminalUpdateInput, CriminalUncheckedUpdateInput>
    /**
     * Choose, which Criminal to update.
     */
    where: CriminalWhereUniqueInput
  }

  /**
   * Criminal updateMany
   */
  export type CriminalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Criminals.
     */
    data: XOR<CriminalUpdateManyMutationInput, CriminalUncheckedUpdateManyInput>
    /**
     * Filter which Criminals to update
     */
    where?: CriminalWhereInput
    /**
     * Limit how many Criminals to update.
     */
    limit?: number
  }

  /**
   * Criminal updateManyAndReturn
   */
  export type CriminalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * The data used to update Criminals.
     */
    data: XOR<CriminalUpdateManyMutationInput, CriminalUncheckedUpdateManyInput>
    /**
     * Filter which Criminals to update
     */
    where?: CriminalWhereInput
    /**
     * Limit how many Criminals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Criminal upsert
   */
  export type CriminalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * The filter to search for the Criminal to update in case it exists.
     */
    where: CriminalWhereUniqueInput
    /**
     * In case the Criminal found by the `where` argument doesn't exist, create a new Criminal with this data.
     */
    create: XOR<CriminalCreateInput, CriminalUncheckedCreateInput>
    /**
     * In case the Criminal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CriminalUpdateInput, CriminalUncheckedUpdateInput>
  }

  /**
   * Criminal delete
   */
  export type CriminalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    /**
     * Filter which Criminal to delete.
     */
    where: CriminalWhereUniqueInput
  }

  /**
   * Criminal deleteMany
   */
  export type CriminalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Criminals to delete
     */
    where?: CriminalWhereInput
    /**
     * Limit how many Criminals to delete.
     */
    limit?: number
  }

  /**
   * Criminal.personal
   */
  export type Criminal$personalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    where?: PersonalWhereInput
  }

  /**
   * Criminal.delitos
   */
  export type Criminal$delitosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    where?: DelitoWhereInput
    orderBy?: DelitoOrderByWithRelationInput | DelitoOrderByWithRelationInput[]
    cursor?: DelitoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DelitoScalarFieldEnum | DelitoScalarFieldEnum[]
  }

  /**
   * Criminal.celda_info
   */
  export type Criminal$celda_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    where?: CeldaWhereInput
  }

  /**
   * Criminal without action
   */
  export type CriminalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
  }


  /**
   * Model Personal
   */

  export type AggregatePersonal = {
    _count: PersonalCountAggregateOutputType | null
    _avg: PersonalAvgAggregateOutputType | null
    _sum: PersonalSumAggregateOutputType | null
    _min: PersonalMinAggregateOutputType | null
    _max: PersonalMaxAggregateOutputType | null
  }

  export type PersonalAvgAggregateOutputType = {
    dni: number | null
  }

  export type PersonalSumAggregateOutputType = {
    dni: number | null
  }

  export type PersonalMinAggregateOutputType = {
    dni: number | null
    nombre: string | null
    rol: string | null
    turno: string | null
    contacto: string | null
  }

  export type PersonalMaxAggregateOutputType = {
    dni: number | null
    nombre: string | null
    rol: string | null
    turno: string | null
    contacto: string | null
  }

  export type PersonalCountAggregateOutputType = {
    dni: number
    nombre: number
    rol: number
    turno: number
    contacto: number
    _all: number
  }


  export type PersonalAvgAggregateInputType = {
    dni?: true
  }

  export type PersonalSumAggregateInputType = {
    dni?: true
  }

  export type PersonalMinAggregateInputType = {
    dni?: true
    nombre?: true
    rol?: true
    turno?: true
    contacto?: true
  }

  export type PersonalMaxAggregateInputType = {
    dni?: true
    nombre?: true
    rol?: true
    turno?: true
    contacto?: true
  }

  export type PersonalCountAggregateInputType = {
    dni?: true
    nombre?: true
    rol?: true
    turno?: true
    contacto?: true
    _all?: true
  }

  export type PersonalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personal to aggregate.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Personals
    **/
    _count?: true | PersonalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalMaxAggregateInputType
  }

  export type GetPersonalAggregateType<T extends PersonalAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonal[P]>
      : GetScalarType<T[P], AggregatePersonal[P]>
  }




  export type PersonalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalWhereInput
    orderBy?: PersonalOrderByWithAggregationInput | PersonalOrderByWithAggregationInput[]
    by: PersonalScalarFieldEnum[] | PersonalScalarFieldEnum
    having?: PersonalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalCountAggregateInputType | true
    _avg?: PersonalAvgAggregateInputType
    _sum?: PersonalSumAggregateInputType
    _min?: PersonalMinAggregateInputType
    _max?: PersonalMaxAggregateInputType
  }

  export type PersonalGroupByOutputType = {
    dni: number
    nombre: string
    rol: string
    turno: string
    contacto: string
    _count: PersonalCountAggregateOutputType | null
    _avg: PersonalAvgAggregateOutputType | null
    _sum: PersonalSumAggregateOutputType | null
    _min: PersonalMinAggregateOutputType | null
    _max: PersonalMaxAggregateOutputType | null
  }

  type GetPersonalGroupByPayload<T extends PersonalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalGroupByOutputType[P]>
        }
      >
    >


  export type PersonalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dni?: boolean
    nombre?: boolean
    rol?: boolean
    turno?: boolean
    contacto?: boolean
    criminales?: boolean | Personal$criminalesArgs<ExtArgs>
    _count?: boolean | PersonalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personal"]>

  export type PersonalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dni?: boolean
    nombre?: boolean
    rol?: boolean
    turno?: boolean
    contacto?: boolean
  }, ExtArgs["result"]["personal"]>

  export type PersonalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dni?: boolean
    nombre?: boolean
    rol?: boolean
    turno?: boolean
    contacto?: boolean
  }, ExtArgs["result"]["personal"]>

  export type PersonalSelectScalar = {
    dni?: boolean
    nombre?: boolean
    rol?: boolean
    turno?: boolean
    contacto?: boolean
  }

  export type PersonalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"dni" | "nombre" | "rol" | "turno" | "contacto", ExtArgs["result"]["personal"]>
  export type PersonalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminales?: boolean | Personal$criminalesArgs<ExtArgs>
    _count?: boolean | PersonalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PersonalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PersonalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Personal"
    objects: {
      criminales: Prisma.$CriminalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      dni: number
      nombre: string
      rol: string
      turno: string
      contacto: string
    }, ExtArgs["result"]["personal"]>
    composites: {}
  }

  type PersonalGetPayload<S extends boolean | null | undefined | PersonalDefaultArgs> = $Result.GetResult<Prisma.$PersonalPayload, S>

  type PersonalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonalCountAggregateInputType | true
    }

  export interface PersonalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Personal'], meta: { name: 'Personal' } }
    /**
     * Find zero or one Personal that matches the filter.
     * @param {PersonalFindUniqueArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonalFindUniqueArgs>(args: SelectSubset<T, PersonalFindUniqueArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Personal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonalFindUniqueOrThrowArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonalFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Personal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalFindFirstArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonalFindFirstArgs>(args?: SelectSubset<T, PersonalFindFirstArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Personal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalFindFirstOrThrowArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonalFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonalFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Personals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personals
     * const personals = await prisma.personal.findMany()
     * 
     * // Get first 10 Personals
     * const personals = await prisma.personal.findMany({ take: 10 })
     * 
     * // Only select the `dni`
     * const personalWithDniOnly = await prisma.personal.findMany({ select: { dni: true } })
     * 
     */
    findMany<T extends PersonalFindManyArgs>(args?: SelectSubset<T, PersonalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Personal.
     * @param {PersonalCreateArgs} args - Arguments to create a Personal.
     * @example
     * // Create one Personal
     * const Personal = await prisma.personal.create({
     *   data: {
     *     // ... data to create a Personal
     *   }
     * })
     * 
     */
    create<T extends PersonalCreateArgs>(args: SelectSubset<T, PersonalCreateArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Personals.
     * @param {PersonalCreateManyArgs} args - Arguments to create many Personals.
     * @example
     * // Create many Personals
     * const personal = await prisma.personal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonalCreateManyArgs>(args?: SelectSubset<T, PersonalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Personals and returns the data saved in the database.
     * @param {PersonalCreateManyAndReturnArgs} args - Arguments to create many Personals.
     * @example
     * // Create many Personals
     * const personal = await prisma.personal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Personals and only return the `dni`
     * const personalWithDniOnly = await prisma.personal.createManyAndReturn({
     *   select: { dni: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonalCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Personal.
     * @param {PersonalDeleteArgs} args - Arguments to delete one Personal.
     * @example
     * // Delete one Personal
     * const Personal = await prisma.personal.delete({
     *   where: {
     *     // ... filter to delete one Personal
     *   }
     * })
     * 
     */
    delete<T extends PersonalDeleteArgs>(args: SelectSubset<T, PersonalDeleteArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Personal.
     * @param {PersonalUpdateArgs} args - Arguments to update one Personal.
     * @example
     * // Update one Personal
     * const personal = await prisma.personal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonalUpdateArgs>(args: SelectSubset<T, PersonalUpdateArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Personals.
     * @param {PersonalDeleteManyArgs} args - Arguments to filter Personals to delete.
     * @example
     * // Delete a few Personals
     * const { count } = await prisma.personal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonalDeleteManyArgs>(args?: SelectSubset<T, PersonalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personals
     * const personal = await prisma.personal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonalUpdateManyArgs>(args: SelectSubset<T, PersonalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personals and returns the data updated in the database.
     * @param {PersonalUpdateManyAndReturnArgs} args - Arguments to update many Personals.
     * @example
     * // Update many Personals
     * const personal = await prisma.personal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Personals and only return the `dni`
     * const personalWithDniOnly = await prisma.personal.updateManyAndReturn({
     *   select: { dni: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonalUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Personal.
     * @param {PersonalUpsertArgs} args - Arguments to update or create a Personal.
     * @example
     * // Update or create a Personal
     * const personal = await prisma.personal.upsert({
     *   create: {
     *     // ... data to create a Personal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Personal we want to update
     *   }
     * })
     */
    upsert<T extends PersonalUpsertArgs>(args: SelectSubset<T, PersonalUpsertArgs<ExtArgs>>): Prisma__PersonalClient<$Result.GetResult<Prisma.$PersonalPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Personals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalCountArgs} args - Arguments to filter Personals to count.
     * @example
     * // Count the number of Personals
     * const count = await prisma.personal.count({
     *   where: {
     *     // ... the filter for the Personals we want to count
     *   }
     * })
    **/
    count<T extends PersonalCountArgs>(
      args?: Subset<T, PersonalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Personal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalAggregateArgs>(args: Subset<T, PersonalAggregateArgs>): Prisma.PrismaPromise<GetPersonalAggregateType<T>>

    /**
     * Group by Personal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalGroupByArgs['orderBy'] }
        : { orderBy?: PersonalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Personal model
   */
  readonly fields: PersonalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Personal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    criminales<T extends Personal$criminalesArgs<ExtArgs> = {}>(args?: Subset<T, Personal$criminalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Personal model
   */ 
  interface PersonalFieldRefs {
    readonly dni: FieldRef<"Personal", 'Int'>
    readonly nombre: FieldRef<"Personal", 'String'>
    readonly rol: FieldRef<"Personal", 'String'>
    readonly turno: FieldRef<"Personal", 'String'>
    readonly contacto: FieldRef<"Personal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Personal findUnique
   */
  export type PersonalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal findUniqueOrThrow
   */
  export type PersonalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal findFirst
   */
  export type PersonalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personals.
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personals.
     */
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Personal findFirstOrThrow
   */
  export type PersonalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personal to fetch.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personals.
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personals.
     */
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Personal findMany
   */
  export type PersonalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter, which Personals to fetch.
     */
    where?: PersonalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personals to fetch.
     */
    orderBy?: PersonalOrderByWithRelationInput | PersonalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Personals.
     */
    cursor?: PersonalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personals.
     */
    skip?: number
    distinct?: PersonalScalarFieldEnum | PersonalScalarFieldEnum[]
  }

  /**
   * Personal create
   */
  export type PersonalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * The data needed to create a Personal.
     */
    data: XOR<PersonalCreateInput, PersonalUncheckedCreateInput>
  }

  /**
   * Personal createMany
   */
  export type PersonalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Personals.
     */
    data: PersonalCreateManyInput | PersonalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Personal createManyAndReturn
   */
  export type PersonalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * The data used to create many Personals.
     */
    data: PersonalCreateManyInput | PersonalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Personal update
   */
  export type PersonalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * The data needed to update a Personal.
     */
    data: XOR<PersonalUpdateInput, PersonalUncheckedUpdateInput>
    /**
     * Choose, which Personal to update.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal updateMany
   */
  export type PersonalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Personals.
     */
    data: XOR<PersonalUpdateManyMutationInput, PersonalUncheckedUpdateManyInput>
    /**
     * Filter which Personals to update
     */
    where?: PersonalWhereInput
    /**
     * Limit how many Personals to update.
     */
    limit?: number
  }

  /**
   * Personal updateManyAndReturn
   */
  export type PersonalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * The data used to update Personals.
     */
    data: XOR<PersonalUpdateManyMutationInput, PersonalUncheckedUpdateManyInput>
    /**
     * Filter which Personals to update
     */
    where?: PersonalWhereInput
    /**
     * Limit how many Personals to update.
     */
    limit?: number
  }

  /**
   * Personal upsert
   */
  export type PersonalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * The filter to search for the Personal to update in case it exists.
     */
    where: PersonalWhereUniqueInput
    /**
     * In case the Personal found by the `where` argument doesn't exist, create a new Personal with this data.
     */
    create: XOR<PersonalCreateInput, PersonalUncheckedCreateInput>
    /**
     * In case the Personal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalUpdateInput, PersonalUncheckedUpdateInput>
  }

  /**
   * Personal delete
   */
  export type PersonalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
    /**
     * Filter which Personal to delete.
     */
    where: PersonalWhereUniqueInput
  }

  /**
   * Personal deleteMany
   */
  export type PersonalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personals to delete
     */
    where?: PersonalWhereInput
    /**
     * Limit how many Personals to delete.
     */
    limit?: number
  }

  /**
   * Personal.criminales
   */
  export type Personal$criminalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    where?: CriminalWhereInput
    orderBy?: CriminalOrderByWithRelationInput | CriminalOrderByWithRelationInput[]
    cursor?: CriminalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CriminalScalarFieldEnum | CriminalScalarFieldEnum[]
  }

  /**
   * Personal without action
   */
  export type PersonalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personal
     */
    select?: PersonalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personal
     */
    omit?: PersonalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInclude<ExtArgs> | null
  }


  /**
   * Model Delito
   */

  export type AggregateDelito = {
    _count: DelitoCountAggregateOutputType | null
    _avg: DelitoAvgAggregateOutputType | null
    _sum: DelitoSumAggregateOutputType | null
    _min: DelitoMinAggregateOutputType | null
    _max: DelitoMaxAggregateOutputType | null
  }

  export type DelitoAvgAggregateOutputType = {
    numero_delito: number | null
    criminal_id: number | null
  }

  export type DelitoSumAggregateOutputType = {
    numero_delito: number | null
    criminal_id: number | null
  }

  export type DelitoMinAggregateOutputType = {
    numero_delito: number | null
    criminal_id: number | null
    descripcion: string | null
    fecha: string | null
    sentencia_judicial: string | null
    lugarDelito: string | null
    estadoDelito: string | null
    nivelPrioridad: string | null
  }

  export type DelitoMaxAggregateOutputType = {
    numero_delito: number | null
    criminal_id: number | null
    descripcion: string | null
    fecha: string | null
    sentencia_judicial: string | null
    lugarDelito: string | null
    estadoDelito: string | null
    nivelPrioridad: string | null
  }

  export type DelitoCountAggregateOutputType = {
    numero_delito: number
    criminal_id: number
    descripcion: number
    fecha: number
    sentencia_judicial: number
    lugarDelito: number
    estadoDelito: number
    nivelPrioridad: number
    _all: number
  }


  export type DelitoAvgAggregateInputType = {
    numero_delito?: true
    criminal_id?: true
  }

  export type DelitoSumAggregateInputType = {
    numero_delito?: true
    criminal_id?: true
  }

  export type DelitoMinAggregateInputType = {
    numero_delito?: true
    criminal_id?: true
    descripcion?: true
    fecha?: true
    sentencia_judicial?: true
    lugarDelito?: true
    estadoDelito?: true
    nivelPrioridad?: true
  }

  export type DelitoMaxAggregateInputType = {
    numero_delito?: true
    criminal_id?: true
    descripcion?: true
    fecha?: true
    sentencia_judicial?: true
    lugarDelito?: true
    estadoDelito?: true
    nivelPrioridad?: true
  }

  export type DelitoCountAggregateInputType = {
    numero_delito?: true
    criminal_id?: true
    descripcion?: true
    fecha?: true
    sentencia_judicial?: true
    lugarDelito?: true
    estadoDelito?: true
    nivelPrioridad?: true
    _all?: true
  }

  export type DelitoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Delito to aggregate.
     */
    where?: DelitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Delitos to fetch.
     */
    orderBy?: DelitoOrderByWithRelationInput | DelitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DelitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Delitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Delitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Delitos
    **/
    _count?: true | DelitoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DelitoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DelitoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DelitoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DelitoMaxAggregateInputType
  }

  export type GetDelitoAggregateType<T extends DelitoAggregateArgs> = {
        [P in keyof T & keyof AggregateDelito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDelito[P]>
      : GetScalarType<T[P], AggregateDelito[P]>
  }




  export type DelitoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DelitoWhereInput
    orderBy?: DelitoOrderByWithAggregationInput | DelitoOrderByWithAggregationInput[]
    by: DelitoScalarFieldEnum[] | DelitoScalarFieldEnum
    having?: DelitoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DelitoCountAggregateInputType | true
    _avg?: DelitoAvgAggregateInputType
    _sum?: DelitoSumAggregateInputType
    _min?: DelitoMinAggregateInputType
    _max?: DelitoMaxAggregateInputType
  }

  export type DelitoGroupByOutputType = {
    numero_delito: number
    criminal_id: number
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
    _count: DelitoCountAggregateOutputType | null
    _avg: DelitoAvgAggregateOutputType | null
    _sum: DelitoSumAggregateOutputType | null
    _min: DelitoMinAggregateOutputType | null
    _max: DelitoMaxAggregateOutputType | null
  }

  type GetDelitoGroupByPayload<T extends DelitoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DelitoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DelitoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DelitoGroupByOutputType[P]>
            : GetScalarType<T[P], DelitoGroupByOutputType[P]>
        }
      >
    >


  export type DelitoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    numero_delito?: boolean
    criminal_id?: boolean
    descripcion?: boolean
    fecha?: boolean
    sentencia_judicial?: boolean
    lugarDelito?: boolean
    estadoDelito?: boolean
    nivelPrioridad?: boolean
    criminal?: boolean | CriminalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["delito"]>

  export type DelitoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    numero_delito?: boolean
    criminal_id?: boolean
    descripcion?: boolean
    fecha?: boolean
    sentencia_judicial?: boolean
    lugarDelito?: boolean
    estadoDelito?: boolean
    nivelPrioridad?: boolean
    criminal?: boolean | CriminalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["delito"]>

  export type DelitoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    numero_delito?: boolean
    criminal_id?: boolean
    descripcion?: boolean
    fecha?: boolean
    sentencia_judicial?: boolean
    lugarDelito?: boolean
    estadoDelito?: boolean
    nivelPrioridad?: boolean
    criminal?: boolean | CriminalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["delito"]>

  export type DelitoSelectScalar = {
    numero_delito?: boolean
    criminal_id?: boolean
    descripcion?: boolean
    fecha?: boolean
    sentencia_judicial?: boolean
    lugarDelito?: boolean
    estadoDelito?: boolean
    nivelPrioridad?: boolean
  }

  export type DelitoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"numero_delito" | "criminal_id" | "descripcion" | "fecha" | "sentencia_judicial" | "lugarDelito" | "estadoDelito" | "nivelPrioridad", ExtArgs["result"]["delito"]>
  export type DelitoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminal?: boolean | CriminalDefaultArgs<ExtArgs>
  }
  export type DelitoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminal?: boolean | CriminalDefaultArgs<ExtArgs>
  }
  export type DelitoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminal?: boolean | CriminalDefaultArgs<ExtArgs>
  }

  export type $DelitoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Delito"
    objects: {
      criminal: Prisma.$CriminalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      numero_delito: number
      criminal_id: number
      descripcion: string
      fecha: string
      sentencia_judicial: string
      lugarDelito: string
      estadoDelito: string
      nivelPrioridad: string
    }, ExtArgs["result"]["delito"]>
    composites: {}
  }

  type DelitoGetPayload<S extends boolean | null | undefined | DelitoDefaultArgs> = $Result.GetResult<Prisma.$DelitoPayload, S>

  type DelitoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DelitoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DelitoCountAggregateInputType | true
    }

  export interface DelitoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Delito'], meta: { name: 'Delito' } }
    /**
     * Find zero or one Delito that matches the filter.
     * @param {DelitoFindUniqueArgs} args - Arguments to find a Delito
     * @example
     * // Get one Delito
     * const delito = await prisma.delito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DelitoFindUniqueArgs>(args: SelectSubset<T, DelitoFindUniqueArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Delito that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DelitoFindUniqueOrThrowArgs} args - Arguments to find a Delito
     * @example
     * // Get one Delito
     * const delito = await prisma.delito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DelitoFindUniqueOrThrowArgs>(args: SelectSubset<T, DelitoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Delito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoFindFirstArgs} args - Arguments to find a Delito
     * @example
     * // Get one Delito
     * const delito = await prisma.delito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DelitoFindFirstArgs>(args?: SelectSubset<T, DelitoFindFirstArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Delito that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoFindFirstOrThrowArgs} args - Arguments to find a Delito
     * @example
     * // Get one Delito
     * const delito = await prisma.delito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DelitoFindFirstOrThrowArgs>(args?: SelectSubset<T, DelitoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Delitos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Delitos
     * const delitos = await prisma.delito.findMany()
     * 
     * // Get first 10 Delitos
     * const delitos = await prisma.delito.findMany({ take: 10 })
     * 
     * // Only select the `numero_delito`
     * const delitoWithNumero_delitoOnly = await prisma.delito.findMany({ select: { numero_delito: true } })
     * 
     */
    findMany<T extends DelitoFindManyArgs>(args?: SelectSubset<T, DelitoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Delito.
     * @param {DelitoCreateArgs} args - Arguments to create a Delito.
     * @example
     * // Create one Delito
     * const Delito = await prisma.delito.create({
     *   data: {
     *     // ... data to create a Delito
     *   }
     * })
     * 
     */
    create<T extends DelitoCreateArgs>(args: SelectSubset<T, DelitoCreateArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Delitos.
     * @param {DelitoCreateManyArgs} args - Arguments to create many Delitos.
     * @example
     * // Create many Delitos
     * const delito = await prisma.delito.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DelitoCreateManyArgs>(args?: SelectSubset<T, DelitoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Delitos and returns the data saved in the database.
     * @param {DelitoCreateManyAndReturnArgs} args - Arguments to create many Delitos.
     * @example
     * // Create many Delitos
     * const delito = await prisma.delito.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Delitos and only return the `numero_delito`
     * const delitoWithNumero_delitoOnly = await prisma.delito.createManyAndReturn({
     *   select: { numero_delito: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DelitoCreateManyAndReturnArgs>(args?: SelectSubset<T, DelitoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Delito.
     * @param {DelitoDeleteArgs} args - Arguments to delete one Delito.
     * @example
     * // Delete one Delito
     * const Delito = await prisma.delito.delete({
     *   where: {
     *     // ... filter to delete one Delito
     *   }
     * })
     * 
     */
    delete<T extends DelitoDeleteArgs>(args: SelectSubset<T, DelitoDeleteArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Delito.
     * @param {DelitoUpdateArgs} args - Arguments to update one Delito.
     * @example
     * // Update one Delito
     * const delito = await prisma.delito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DelitoUpdateArgs>(args: SelectSubset<T, DelitoUpdateArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Delitos.
     * @param {DelitoDeleteManyArgs} args - Arguments to filter Delitos to delete.
     * @example
     * // Delete a few Delitos
     * const { count } = await prisma.delito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DelitoDeleteManyArgs>(args?: SelectSubset<T, DelitoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Delitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Delitos
     * const delito = await prisma.delito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DelitoUpdateManyArgs>(args: SelectSubset<T, DelitoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Delitos and returns the data updated in the database.
     * @param {DelitoUpdateManyAndReturnArgs} args - Arguments to update many Delitos.
     * @example
     * // Update many Delitos
     * const delito = await prisma.delito.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Delitos and only return the `numero_delito`
     * const delitoWithNumero_delitoOnly = await prisma.delito.updateManyAndReturn({
     *   select: { numero_delito: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DelitoUpdateManyAndReturnArgs>(args: SelectSubset<T, DelitoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Delito.
     * @param {DelitoUpsertArgs} args - Arguments to update or create a Delito.
     * @example
     * // Update or create a Delito
     * const delito = await prisma.delito.upsert({
     *   create: {
     *     // ... data to create a Delito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Delito we want to update
     *   }
     * })
     */
    upsert<T extends DelitoUpsertArgs>(args: SelectSubset<T, DelitoUpsertArgs<ExtArgs>>): Prisma__DelitoClient<$Result.GetResult<Prisma.$DelitoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Delitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoCountArgs} args - Arguments to filter Delitos to count.
     * @example
     * // Count the number of Delitos
     * const count = await prisma.delito.count({
     *   where: {
     *     // ... the filter for the Delitos we want to count
     *   }
     * })
    **/
    count<T extends DelitoCountArgs>(
      args?: Subset<T, DelitoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DelitoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Delito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DelitoAggregateArgs>(args: Subset<T, DelitoAggregateArgs>): Prisma.PrismaPromise<GetDelitoAggregateType<T>>

    /**
     * Group by Delito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelitoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DelitoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DelitoGroupByArgs['orderBy'] }
        : { orderBy?: DelitoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DelitoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDelitoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Delito model
   */
  readonly fields: DelitoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Delito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DelitoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    criminal<T extends CriminalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CriminalDefaultArgs<ExtArgs>>): Prisma__CriminalClient<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Delito model
   */ 
  interface DelitoFieldRefs {
    readonly numero_delito: FieldRef<"Delito", 'Int'>
    readonly criminal_id: FieldRef<"Delito", 'Int'>
    readonly descripcion: FieldRef<"Delito", 'String'>
    readonly fecha: FieldRef<"Delito", 'String'>
    readonly sentencia_judicial: FieldRef<"Delito", 'String'>
    readonly lugarDelito: FieldRef<"Delito", 'String'>
    readonly estadoDelito: FieldRef<"Delito", 'String'>
    readonly nivelPrioridad: FieldRef<"Delito", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Delito findUnique
   */
  export type DelitoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * Filter, which Delito to fetch.
     */
    where: DelitoWhereUniqueInput
  }

  /**
   * Delito findUniqueOrThrow
   */
  export type DelitoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * Filter, which Delito to fetch.
     */
    where: DelitoWhereUniqueInput
  }

  /**
   * Delito findFirst
   */
  export type DelitoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * Filter, which Delito to fetch.
     */
    where?: DelitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Delitos to fetch.
     */
    orderBy?: DelitoOrderByWithRelationInput | DelitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Delitos.
     */
    cursor?: DelitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Delitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Delitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Delitos.
     */
    distinct?: DelitoScalarFieldEnum | DelitoScalarFieldEnum[]
  }

  /**
   * Delito findFirstOrThrow
   */
  export type DelitoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * Filter, which Delito to fetch.
     */
    where?: DelitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Delitos to fetch.
     */
    orderBy?: DelitoOrderByWithRelationInput | DelitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Delitos.
     */
    cursor?: DelitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Delitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Delitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Delitos.
     */
    distinct?: DelitoScalarFieldEnum | DelitoScalarFieldEnum[]
  }

  /**
   * Delito findMany
   */
  export type DelitoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * Filter, which Delitos to fetch.
     */
    where?: DelitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Delitos to fetch.
     */
    orderBy?: DelitoOrderByWithRelationInput | DelitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Delitos.
     */
    cursor?: DelitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Delitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Delitos.
     */
    skip?: number
    distinct?: DelitoScalarFieldEnum | DelitoScalarFieldEnum[]
  }

  /**
   * Delito create
   */
  export type DelitoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * The data needed to create a Delito.
     */
    data: XOR<DelitoCreateInput, DelitoUncheckedCreateInput>
  }

  /**
   * Delito createMany
   */
  export type DelitoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Delitos.
     */
    data: DelitoCreateManyInput | DelitoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Delito createManyAndReturn
   */
  export type DelitoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * The data used to create many Delitos.
     */
    data: DelitoCreateManyInput | DelitoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Delito update
   */
  export type DelitoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * The data needed to update a Delito.
     */
    data: XOR<DelitoUpdateInput, DelitoUncheckedUpdateInput>
    /**
     * Choose, which Delito to update.
     */
    where: DelitoWhereUniqueInput
  }

  /**
   * Delito updateMany
   */
  export type DelitoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Delitos.
     */
    data: XOR<DelitoUpdateManyMutationInput, DelitoUncheckedUpdateManyInput>
    /**
     * Filter which Delitos to update
     */
    where?: DelitoWhereInput
    /**
     * Limit how many Delitos to update.
     */
    limit?: number
  }

  /**
   * Delito updateManyAndReturn
   */
  export type DelitoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * The data used to update Delitos.
     */
    data: XOR<DelitoUpdateManyMutationInput, DelitoUncheckedUpdateManyInput>
    /**
     * Filter which Delitos to update
     */
    where?: DelitoWhereInput
    /**
     * Limit how many Delitos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Delito upsert
   */
  export type DelitoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * The filter to search for the Delito to update in case it exists.
     */
    where: DelitoWhereUniqueInput
    /**
     * In case the Delito found by the `where` argument doesn't exist, create a new Delito with this data.
     */
    create: XOR<DelitoCreateInput, DelitoUncheckedCreateInput>
    /**
     * In case the Delito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DelitoUpdateInput, DelitoUncheckedUpdateInput>
  }

  /**
   * Delito delete
   */
  export type DelitoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
    /**
     * Filter which Delito to delete.
     */
    where: DelitoWhereUniqueInput
  }

  /**
   * Delito deleteMany
   */
  export type DelitoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Delitos to delete
     */
    where?: DelitoWhereInput
    /**
     * Limit how many Delitos to delete.
     */
    limit?: number
  }

  /**
   * Delito without action
   */
  export type DelitoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Delito
     */
    select?: DelitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Delito
     */
    omit?: DelitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DelitoInclude<ExtArgs> | null
  }


  /**
   * Model Celda
   */

  export type AggregateCelda = {
    _count: CeldaCountAggregateOutputType | null
    _avg: CeldaAvgAggregateOutputType | null
    _sum: CeldaSumAggregateOutputType | null
    _min: CeldaMinAggregateOutputType | null
    _max: CeldaMaxAggregateOutputType | null
  }

  export type CeldaAvgAggregateOutputType = {
    numero_celda: number | null
    piso: number | null
    capacidad: number | null
  }

  export type CeldaSumAggregateOutputType = {
    numero_celda: number | null
    piso: number | null
    capacidad: number | null
  }

  export type CeldaMinAggregateOutputType = {
    numero_celda: number | null
    tipoCelda: string | null
    descripcionCelda: string | null
    nivelSeguridad: string | null
    camarasSeguridad: boolean | null
    sensoresMovimiento: boolean | null
    alarmas: boolean | null
    piso: number | null
    capacidad: number | null
  }

  export type CeldaMaxAggregateOutputType = {
    numero_celda: number | null
    tipoCelda: string | null
    descripcionCelda: string | null
    nivelSeguridad: string | null
    camarasSeguridad: boolean | null
    sensoresMovimiento: boolean | null
    alarmas: boolean | null
    piso: number | null
    capacidad: number | null
  }

  export type CeldaCountAggregateOutputType = {
    numero_celda: number
    tipoCelda: number
    descripcionCelda: number
    nivelSeguridad: number
    camarasSeguridad: number
    sensoresMovimiento: number
    alarmas: number
    piso: number
    capacidad: number
    _all: number
  }


  export type CeldaAvgAggregateInputType = {
    numero_celda?: true
    piso?: true
    capacidad?: true
  }

  export type CeldaSumAggregateInputType = {
    numero_celda?: true
    piso?: true
    capacidad?: true
  }

  export type CeldaMinAggregateInputType = {
    numero_celda?: true
    tipoCelda?: true
    descripcionCelda?: true
    nivelSeguridad?: true
    camarasSeguridad?: true
    sensoresMovimiento?: true
    alarmas?: true
    piso?: true
    capacidad?: true
  }

  export type CeldaMaxAggregateInputType = {
    numero_celda?: true
    tipoCelda?: true
    descripcionCelda?: true
    nivelSeguridad?: true
    camarasSeguridad?: true
    sensoresMovimiento?: true
    alarmas?: true
    piso?: true
    capacidad?: true
  }

  export type CeldaCountAggregateInputType = {
    numero_celda?: true
    tipoCelda?: true
    descripcionCelda?: true
    nivelSeguridad?: true
    camarasSeguridad?: true
    sensoresMovimiento?: true
    alarmas?: true
    piso?: true
    capacidad?: true
    _all?: true
  }

  export type CeldaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Celda to aggregate.
     */
    where?: CeldaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Celdas to fetch.
     */
    orderBy?: CeldaOrderByWithRelationInput | CeldaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CeldaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Celdas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Celdas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Celdas
    **/
    _count?: true | CeldaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CeldaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CeldaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CeldaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CeldaMaxAggregateInputType
  }

  export type GetCeldaAggregateType<T extends CeldaAggregateArgs> = {
        [P in keyof T & keyof AggregateCelda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCelda[P]>
      : GetScalarType<T[P], AggregateCelda[P]>
  }




  export type CeldaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CeldaWhereInput
    orderBy?: CeldaOrderByWithAggregationInput | CeldaOrderByWithAggregationInput[]
    by: CeldaScalarFieldEnum[] | CeldaScalarFieldEnum
    having?: CeldaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CeldaCountAggregateInputType | true
    _avg?: CeldaAvgAggregateInputType
    _sum?: CeldaSumAggregateInputType
    _min?: CeldaMinAggregateInputType
    _max?: CeldaMaxAggregateInputType
  }

  export type CeldaGroupByOutputType = {
    numero_celda: number
    tipoCelda: string
    descripcionCelda: string
    nivelSeguridad: string
    camarasSeguridad: boolean
    sensoresMovimiento: boolean
    alarmas: boolean
    piso: number
    capacidad: number
    _count: CeldaCountAggregateOutputType | null
    _avg: CeldaAvgAggregateOutputType | null
    _sum: CeldaSumAggregateOutputType | null
    _min: CeldaMinAggregateOutputType | null
    _max: CeldaMaxAggregateOutputType | null
  }

  type GetCeldaGroupByPayload<T extends CeldaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CeldaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CeldaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CeldaGroupByOutputType[P]>
            : GetScalarType<T[P], CeldaGroupByOutputType[P]>
        }
      >
    >


  export type CeldaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    numero_celda?: boolean
    tipoCelda?: boolean
    descripcionCelda?: boolean
    nivelSeguridad?: boolean
    camarasSeguridad?: boolean
    sensoresMovimiento?: boolean
    alarmas?: boolean
    piso?: boolean
    capacidad?: boolean
    criminales?: boolean | Celda$criminalesArgs<ExtArgs>
    _count?: boolean | CeldaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["celda"]>

  export type CeldaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    numero_celda?: boolean
    tipoCelda?: boolean
    descripcionCelda?: boolean
    nivelSeguridad?: boolean
    camarasSeguridad?: boolean
    sensoresMovimiento?: boolean
    alarmas?: boolean
    piso?: boolean
    capacidad?: boolean
  }, ExtArgs["result"]["celda"]>

  export type CeldaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    numero_celda?: boolean
    tipoCelda?: boolean
    descripcionCelda?: boolean
    nivelSeguridad?: boolean
    camarasSeguridad?: boolean
    sensoresMovimiento?: boolean
    alarmas?: boolean
    piso?: boolean
    capacidad?: boolean
  }, ExtArgs["result"]["celda"]>

  export type CeldaSelectScalar = {
    numero_celda?: boolean
    tipoCelda?: boolean
    descripcionCelda?: boolean
    nivelSeguridad?: boolean
    camarasSeguridad?: boolean
    sensoresMovimiento?: boolean
    alarmas?: boolean
    piso?: boolean
    capacidad?: boolean
  }

  export type CeldaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"numero_celda" | "tipoCelda" | "descripcionCelda" | "nivelSeguridad" | "camarasSeguridad" | "sensoresMovimiento" | "alarmas" | "piso" | "capacidad", ExtArgs["result"]["celda"]>
  export type CeldaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criminales?: boolean | Celda$criminalesArgs<ExtArgs>
    _count?: boolean | CeldaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CeldaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CeldaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CeldaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Celda"
    objects: {
      criminales: Prisma.$CriminalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      numero_celda: number
      tipoCelda: string
      descripcionCelda: string
      nivelSeguridad: string
      camarasSeguridad: boolean
      sensoresMovimiento: boolean
      alarmas: boolean
      piso: number
      capacidad: number
    }, ExtArgs["result"]["celda"]>
    composites: {}
  }

  type CeldaGetPayload<S extends boolean | null | undefined | CeldaDefaultArgs> = $Result.GetResult<Prisma.$CeldaPayload, S>

  type CeldaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CeldaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CeldaCountAggregateInputType | true
    }

  export interface CeldaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Celda'], meta: { name: 'Celda' } }
    /**
     * Find zero or one Celda that matches the filter.
     * @param {CeldaFindUniqueArgs} args - Arguments to find a Celda
     * @example
     * // Get one Celda
     * const celda = await prisma.celda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CeldaFindUniqueArgs>(args: SelectSubset<T, CeldaFindUniqueArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Celda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CeldaFindUniqueOrThrowArgs} args - Arguments to find a Celda
     * @example
     * // Get one Celda
     * const celda = await prisma.celda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CeldaFindUniqueOrThrowArgs>(args: SelectSubset<T, CeldaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Celda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaFindFirstArgs} args - Arguments to find a Celda
     * @example
     * // Get one Celda
     * const celda = await prisma.celda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CeldaFindFirstArgs>(args?: SelectSubset<T, CeldaFindFirstArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Celda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaFindFirstOrThrowArgs} args - Arguments to find a Celda
     * @example
     * // Get one Celda
     * const celda = await prisma.celda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CeldaFindFirstOrThrowArgs>(args?: SelectSubset<T, CeldaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Celdas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Celdas
     * const celdas = await prisma.celda.findMany()
     * 
     * // Get first 10 Celdas
     * const celdas = await prisma.celda.findMany({ take: 10 })
     * 
     * // Only select the `numero_celda`
     * const celdaWithNumero_celdaOnly = await prisma.celda.findMany({ select: { numero_celda: true } })
     * 
     */
    findMany<T extends CeldaFindManyArgs>(args?: SelectSubset<T, CeldaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Celda.
     * @param {CeldaCreateArgs} args - Arguments to create a Celda.
     * @example
     * // Create one Celda
     * const Celda = await prisma.celda.create({
     *   data: {
     *     // ... data to create a Celda
     *   }
     * })
     * 
     */
    create<T extends CeldaCreateArgs>(args: SelectSubset<T, CeldaCreateArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Celdas.
     * @param {CeldaCreateManyArgs} args - Arguments to create many Celdas.
     * @example
     * // Create many Celdas
     * const celda = await prisma.celda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CeldaCreateManyArgs>(args?: SelectSubset<T, CeldaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Celdas and returns the data saved in the database.
     * @param {CeldaCreateManyAndReturnArgs} args - Arguments to create many Celdas.
     * @example
     * // Create many Celdas
     * const celda = await prisma.celda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Celdas and only return the `numero_celda`
     * const celdaWithNumero_celdaOnly = await prisma.celda.createManyAndReturn({
     *   select: { numero_celda: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CeldaCreateManyAndReturnArgs>(args?: SelectSubset<T, CeldaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Celda.
     * @param {CeldaDeleteArgs} args - Arguments to delete one Celda.
     * @example
     * // Delete one Celda
     * const Celda = await prisma.celda.delete({
     *   where: {
     *     // ... filter to delete one Celda
     *   }
     * })
     * 
     */
    delete<T extends CeldaDeleteArgs>(args: SelectSubset<T, CeldaDeleteArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Celda.
     * @param {CeldaUpdateArgs} args - Arguments to update one Celda.
     * @example
     * // Update one Celda
     * const celda = await prisma.celda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CeldaUpdateArgs>(args: SelectSubset<T, CeldaUpdateArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Celdas.
     * @param {CeldaDeleteManyArgs} args - Arguments to filter Celdas to delete.
     * @example
     * // Delete a few Celdas
     * const { count } = await prisma.celda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CeldaDeleteManyArgs>(args?: SelectSubset<T, CeldaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Celdas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Celdas
     * const celda = await prisma.celda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CeldaUpdateManyArgs>(args: SelectSubset<T, CeldaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Celdas and returns the data updated in the database.
     * @param {CeldaUpdateManyAndReturnArgs} args - Arguments to update many Celdas.
     * @example
     * // Update many Celdas
     * const celda = await prisma.celda.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Celdas and only return the `numero_celda`
     * const celdaWithNumero_celdaOnly = await prisma.celda.updateManyAndReturn({
     *   select: { numero_celda: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CeldaUpdateManyAndReturnArgs>(args: SelectSubset<T, CeldaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Celda.
     * @param {CeldaUpsertArgs} args - Arguments to update or create a Celda.
     * @example
     * // Update or create a Celda
     * const celda = await prisma.celda.upsert({
     *   create: {
     *     // ... data to create a Celda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Celda we want to update
     *   }
     * })
     */
    upsert<T extends CeldaUpsertArgs>(args: SelectSubset<T, CeldaUpsertArgs<ExtArgs>>): Prisma__CeldaClient<$Result.GetResult<Prisma.$CeldaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Celdas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaCountArgs} args - Arguments to filter Celdas to count.
     * @example
     * // Count the number of Celdas
     * const count = await prisma.celda.count({
     *   where: {
     *     // ... the filter for the Celdas we want to count
     *   }
     * })
    **/
    count<T extends CeldaCountArgs>(
      args?: Subset<T, CeldaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CeldaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Celda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CeldaAggregateArgs>(args: Subset<T, CeldaAggregateArgs>): Prisma.PrismaPromise<GetCeldaAggregateType<T>>

    /**
     * Group by Celda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CeldaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CeldaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CeldaGroupByArgs['orderBy'] }
        : { orderBy?: CeldaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CeldaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCeldaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Celda model
   */
  readonly fields: CeldaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Celda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CeldaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    criminales<T extends Celda$criminalesArgs<ExtArgs> = {}>(args?: Subset<T, Celda$criminalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriminalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Celda model
   */ 
  interface CeldaFieldRefs {
    readonly numero_celda: FieldRef<"Celda", 'Int'>
    readonly tipoCelda: FieldRef<"Celda", 'String'>
    readonly descripcionCelda: FieldRef<"Celda", 'String'>
    readonly nivelSeguridad: FieldRef<"Celda", 'String'>
    readonly camarasSeguridad: FieldRef<"Celda", 'Boolean'>
    readonly sensoresMovimiento: FieldRef<"Celda", 'Boolean'>
    readonly alarmas: FieldRef<"Celda", 'Boolean'>
    readonly piso: FieldRef<"Celda", 'Int'>
    readonly capacidad: FieldRef<"Celda", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Celda findUnique
   */
  export type CeldaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * Filter, which Celda to fetch.
     */
    where: CeldaWhereUniqueInput
  }

  /**
   * Celda findUniqueOrThrow
   */
  export type CeldaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * Filter, which Celda to fetch.
     */
    where: CeldaWhereUniqueInput
  }

  /**
   * Celda findFirst
   */
  export type CeldaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * Filter, which Celda to fetch.
     */
    where?: CeldaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Celdas to fetch.
     */
    orderBy?: CeldaOrderByWithRelationInput | CeldaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Celdas.
     */
    cursor?: CeldaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Celdas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Celdas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Celdas.
     */
    distinct?: CeldaScalarFieldEnum | CeldaScalarFieldEnum[]
  }

  /**
   * Celda findFirstOrThrow
   */
  export type CeldaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * Filter, which Celda to fetch.
     */
    where?: CeldaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Celdas to fetch.
     */
    orderBy?: CeldaOrderByWithRelationInput | CeldaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Celdas.
     */
    cursor?: CeldaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Celdas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Celdas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Celdas.
     */
    distinct?: CeldaScalarFieldEnum | CeldaScalarFieldEnum[]
  }

  /**
   * Celda findMany
   */
  export type CeldaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * Filter, which Celdas to fetch.
     */
    where?: CeldaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Celdas to fetch.
     */
    orderBy?: CeldaOrderByWithRelationInput | CeldaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Celdas.
     */
    cursor?: CeldaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Celdas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Celdas.
     */
    skip?: number
    distinct?: CeldaScalarFieldEnum | CeldaScalarFieldEnum[]
  }

  /**
   * Celda create
   */
  export type CeldaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * The data needed to create a Celda.
     */
    data: XOR<CeldaCreateInput, CeldaUncheckedCreateInput>
  }

  /**
   * Celda createMany
   */
  export type CeldaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Celdas.
     */
    data: CeldaCreateManyInput | CeldaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Celda createManyAndReturn
   */
  export type CeldaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * The data used to create many Celdas.
     */
    data: CeldaCreateManyInput | CeldaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Celda update
   */
  export type CeldaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * The data needed to update a Celda.
     */
    data: XOR<CeldaUpdateInput, CeldaUncheckedUpdateInput>
    /**
     * Choose, which Celda to update.
     */
    where: CeldaWhereUniqueInput
  }

  /**
   * Celda updateMany
   */
  export type CeldaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Celdas.
     */
    data: XOR<CeldaUpdateManyMutationInput, CeldaUncheckedUpdateManyInput>
    /**
     * Filter which Celdas to update
     */
    where?: CeldaWhereInput
    /**
     * Limit how many Celdas to update.
     */
    limit?: number
  }

  /**
   * Celda updateManyAndReturn
   */
  export type CeldaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * The data used to update Celdas.
     */
    data: XOR<CeldaUpdateManyMutationInput, CeldaUncheckedUpdateManyInput>
    /**
     * Filter which Celdas to update
     */
    where?: CeldaWhereInput
    /**
     * Limit how many Celdas to update.
     */
    limit?: number
  }

  /**
   * Celda upsert
   */
  export type CeldaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * The filter to search for the Celda to update in case it exists.
     */
    where: CeldaWhereUniqueInput
    /**
     * In case the Celda found by the `where` argument doesn't exist, create a new Celda with this data.
     */
    create: XOR<CeldaCreateInput, CeldaUncheckedCreateInput>
    /**
     * In case the Celda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CeldaUpdateInput, CeldaUncheckedUpdateInput>
  }

  /**
   * Celda delete
   */
  export type CeldaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
    /**
     * Filter which Celda to delete.
     */
    where: CeldaWhereUniqueInput
  }

  /**
   * Celda deleteMany
   */
  export type CeldaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Celdas to delete
     */
    where?: CeldaWhereInput
    /**
     * Limit how many Celdas to delete.
     */
    limit?: number
  }

  /**
   * Celda.criminales
   */
  export type Celda$criminalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criminal
     */
    select?: CriminalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Criminal
     */
    omit?: CriminalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriminalInclude<ExtArgs> | null
    where?: CriminalWhereInput
    orderBy?: CriminalOrderByWithRelationInput | CriminalOrderByWithRelationInput[]
    cursor?: CriminalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CriminalScalarFieldEnum | CriminalScalarFieldEnum[]
  }

  /**
   * Celda without action
   */
  export type CeldaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Celda
     */
    select?: CeldaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Celda
     */
    omit?: CeldaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CeldaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CriminalScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apodo: 'apodo',
    edad: 'edad',
    genero: 'genero',
    tratamiento: 'tratamiento',
    peligrosidad: 'peligrosidad',
    personal_asignado: 'personal_asignado',
    celda: 'celda',
    foto: 'foto'
  };

  export type CriminalScalarFieldEnum = (typeof CriminalScalarFieldEnum)[keyof typeof CriminalScalarFieldEnum]


  export const PersonalScalarFieldEnum: {
    dni: 'dni',
    nombre: 'nombre',
    rol: 'rol',
    turno: 'turno',
    contacto: 'contacto'
  };

  export type PersonalScalarFieldEnum = (typeof PersonalScalarFieldEnum)[keyof typeof PersonalScalarFieldEnum]


  export const DelitoScalarFieldEnum: {
    numero_delito: 'numero_delito',
    criminal_id: 'criminal_id',
    descripcion: 'descripcion',
    fecha: 'fecha',
    sentencia_judicial: 'sentencia_judicial',
    lugarDelito: 'lugarDelito',
    estadoDelito: 'estadoDelito',
    nivelPrioridad: 'nivelPrioridad'
  };

  export type DelitoScalarFieldEnum = (typeof DelitoScalarFieldEnum)[keyof typeof DelitoScalarFieldEnum]


  export const CeldaScalarFieldEnum: {
    numero_celda: 'numero_celda',
    tipoCelda: 'tipoCelda',
    descripcionCelda: 'descripcionCelda',
    nivelSeguridad: 'nivelSeguridad',
    camarasSeguridad: 'camarasSeguridad',
    sensoresMovimiento: 'sensoresMovimiento',
    alarmas: 'alarmas',
    piso: 'piso',
    capacidad: 'capacidad'
  };

  export type CeldaScalarFieldEnum = (typeof CeldaScalarFieldEnum)[keyof typeof CeldaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CriminalWhereInput = {
    AND?: CriminalWhereInput | CriminalWhereInput[]
    OR?: CriminalWhereInput[]
    NOT?: CriminalWhereInput | CriminalWhereInput[]
    id?: IntFilter<"Criminal"> | number
    nombre?: StringFilter<"Criminal"> | string
    apodo?: StringFilter<"Criminal"> | string
    edad?: IntFilter<"Criminal"> | number
    genero?: StringFilter<"Criminal"> | string
    tratamiento?: StringFilter<"Criminal"> | string
    peligrosidad?: StringFilter<"Criminal"> | string
    personal_asignado?: IntNullableFilter<"Criminal"> | number | null
    celda?: IntNullableFilter<"Criminal"> | number | null
    foto?: StringNullableFilter<"Criminal"> | string | null
    personal?: XOR<PersonalNullableScalarRelationFilter, PersonalWhereInput> | null
    delitos?: DelitoListRelationFilter
    celda_info?: XOR<CeldaNullableScalarRelationFilter, CeldaWhereInput> | null
  }

  export type CriminalOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apodo?: SortOrder
    edad?: SortOrder
    genero?: SortOrder
    tratamiento?: SortOrder
    peligrosidad?: SortOrder
    personal_asignado?: SortOrderInput | SortOrder
    celda?: SortOrderInput | SortOrder
    foto?: SortOrderInput | SortOrder
    personal?: PersonalOrderByWithRelationInput
    delitos?: DelitoOrderByRelationAggregateInput
    celda_info?: CeldaOrderByWithRelationInput
  }

  export type CriminalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CriminalWhereInput | CriminalWhereInput[]
    OR?: CriminalWhereInput[]
    NOT?: CriminalWhereInput | CriminalWhereInput[]
    nombre?: StringFilter<"Criminal"> | string
    apodo?: StringFilter<"Criminal"> | string
    edad?: IntFilter<"Criminal"> | number
    genero?: StringFilter<"Criminal"> | string
    tratamiento?: StringFilter<"Criminal"> | string
    peligrosidad?: StringFilter<"Criminal"> | string
    personal_asignado?: IntNullableFilter<"Criminal"> | number | null
    celda?: IntNullableFilter<"Criminal"> | number | null
    foto?: StringNullableFilter<"Criminal"> | string | null
    personal?: XOR<PersonalNullableScalarRelationFilter, PersonalWhereInput> | null
    delitos?: DelitoListRelationFilter
    celda_info?: XOR<CeldaNullableScalarRelationFilter, CeldaWhereInput> | null
  }, "id">

  export type CriminalOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apodo?: SortOrder
    edad?: SortOrder
    genero?: SortOrder
    tratamiento?: SortOrder
    peligrosidad?: SortOrder
    personal_asignado?: SortOrderInput | SortOrder
    celda?: SortOrderInput | SortOrder
    foto?: SortOrderInput | SortOrder
    _count?: CriminalCountOrderByAggregateInput
    _avg?: CriminalAvgOrderByAggregateInput
    _max?: CriminalMaxOrderByAggregateInput
    _min?: CriminalMinOrderByAggregateInput
    _sum?: CriminalSumOrderByAggregateInput
  }

  export type CriminalScalarWhereWithAggregatesInput = {
    AND?: CriminalScalarWhereWithAggregatesInput | CriminalScalarWhereWithAggregatesInput[]
    OR?: CriminalScalarWhereWithAggregatesInput[]
    NOT?: CriminalScalarWhereWithAggregatesInput | CriminalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Criminal"> | number
    nombre?: StringWithAggregatesFilter<"Criminal"> | string
    apodo?: StringWithAggregatesFilter<"Criminal"> | string
    edad?: IntWithAggregatesFilter<"Criminal"> | number
    genero?: StringWithAggregatesFilter<"Criminal"> | string
    tratamiento?: StringWithAggregatesFilter<"Criminal"> | string
    peligrosidad?: StringWithAggregatesFilter<"Criminal"> | string
    personal_asignado?: IntNullableWithAggregatesFilter<"Criminal"> | number | null
    celda?: IntNullableWithAggregatesFilter<"Criminal"> | number | null
    foto?: StringNullableWithAggregatesFilter<"Criminal"> | string | null
  }

  export type PersonalWhereInput = {
    AND?: PersonalWhereInput | PersonalWhereInput[]
    OR?: PersonalWhereInput[]
    NOT?: PersonalWhereInput | PersonalWhereInput[]
    dni?: IntFilter<"Personal"> | number
    nombre?: StringFilter<"Personal"> | string
    rol?: StringFilter<"Personal"> | string
    turno?: StringFilter<"Personal"> | string
    contacto?: StringFilter<"Personal"> | string
    criminales?: CriminalListRelationFilter
  }

  export type PersonalOrderByWithRelationInput = {
    dni?: SortOrder
    nombre?: SortOrder
    rol?: SortOrder
    turno?: SortOrder
    contacto?: SortOrder
    criminales?: CriminalOrderByRelationAggregateInput
  }

  export type PersonalWhereUniqueInput = Prisma.AtLeast<{
    dni?: number
    AND?: PersonalWhereInput | PersonalWhereInput[]
    OR?: PersonalWhereInput[]
    NOT?: PersonalWhereInput | PersonalWhereInput[]
    nombre?: StringFilter<"Personal"> | string
    rol?: StringFilter<"Personal"> | string
    turno?: StringFilter<"Personal"> | string
    contacto?: StringFilter<"Personal"> | string
    criminales?: CriminalListRelationFilter
  }, "dni">

  export type PersonalOrderByWithAggregationInput = {
    dni?: SortOrder
    nombre?: SortOrder
    rol?: SortOrder
    turno?: SortOrder
    contacto?: SortOrder
    _count?: PersonalCountOrderByAggregateInput
    _avg?: PersonalAvgOrderByAggregateInput
    _max?: PersonalMaxOrderByAggregateInput
    _min?: PersonalMinOrderByAggregateInput
    _sum?: PersonalSumOrderByAggregateInput
  }

  export type PersonalScalarWhereWithAggregatesInput = {
    AND?: PersonalScalarWhereWithAggregatesInput | PersonalScalarWhereWithAggregatesInput[]
    OR?: PersonalScalarWhereWithAggregatesInput[]
    NOT?: PersonalScalarWhereWithAggregatesInput | PersonalScalarWhereWithAggregatesInput[]
    dni?: IntWithAggregatesFilter<"Personal"> | number
    nombre?: StringWithAggregatesFilter<"Personal"> | string
    rol?: StringWithAggregatesFilter<"Personal"> | string
    turno?: StringWithAggregatesFilter<"Personal"> | string
    contacto?: StringWithAggregatesFilter<"Personal"> | string
  }

  export type DelitoWhereInput = {
    AND?: DelitoWhereInput | DelitoWhereInput[]
    OR?: DelitoWhereInput[]
    NOT?: DelitoWhereInput | DelitoWhereInput[]
    numero_delito?: IntFilter<"Delito"> | number
    criminal_id?: IntFilter<"Delito"> | number
    descripcion?: StringFilter<"Delito"> | string
    fecha?: StringFilter<"Delito"> | string
    sentencia_judicial?: StringFilter<"Delito"> | string
    lugarDelito?: StringFilter<"Delito"> | string
    estadoDelito?: StringFilter<"Delito"> | string
    nivelPrioridad?: StringFilter<"Delito"> | string
    criminal?: XOR<CriminalScalarRelationFilter, CriminalWhereInput>
  }

  export type DelitoOrderByWithRelationInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    sentencia_judicial?: SortOrder
    lugarDelito?: SortOrder
    estadoDelito?: SortOrder
    nivelPrioridad?: SortOrder
    criminal?: CriminalOrderByWithRelationInput
  }

  export type DelitoWhereUniqueInput = Prisma.AtLeast<{
    numero_delito?: number
    AND?: DelitoWhereInput | DelitoWhereInput[]
    OR?: DelitoWhereInput[]
    NOT?: DelitoWhereInput | DelitoWhereInput[]
    criminal_id?: IntFilter<"Delito"> | number
    descripcion?: StringFilter<"Delito"> | string
    fecha?: StringFilter<"Delito"> | string
    sentencia_judicial?: StringFilter<"Delito"> | string
    lugarDelito?: StringFilter<"Delito"> | string
    estadoDelito?: StringFilter<"Delito"> | string
    nivelPrioridad?: StringFilter<"Delito"> | string
    criminal?: XOR<CriminalScalarRelationFilter, CriminalWhereInput>
  }, "numero_delito">

  export type DelitoOrderByWithAggregationInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    sentencia_judicial?: SortOrder
    lugarDelito?: SortOrder
    estadoDelito?: SortOrder
    nivelPrioridad?: SortOrder
    _count?: DelitoCountOrderByAggregateInput
    _avg?: DelitoAvgOrderByAggregateInput
    _max?: DelitoMaxOrderByAggregateInput
    _min?: DelitoMinOrderByAggregateInput
    _sum?: DelitoSumOrderByAggregateInput
  }

  export type DelitoScalarWhereWithAggregatesInput = {
    AND?: DelitoScalarWhereWithAggregatesInput | DelitoScalarWhereWithAggregatesInput[]
    OR?: DelitoScalarWhereWithAggregatesInput[]
    NOT?: DelitoScalarWhereWithAggregatesInput | DelitoScalarWhereWithAggregatesInput[]
    numero_delito?: IntWithAggregatesFilter<"Delito"> | number
    criminal_id?: IntWithAggregatesFilter<"Delito"> | number
    descripcion?: StringWithAggregatesFilter<"Delito"> | string
    fecha?: StringWithAggregatesFilter<"Delito"> | string
    sentencia_judicial?: StringWithAggregatesFilter<"Delito"> | string
    lugarDelito?: StringWithAggregatesFilter<"Delito"> | string
    estadoDelito?: StringWithAggregatesFilter<"Delito"> | string
    nivelPrioridad?: StringWithAggregatesFilter<"Delito"> | string
  }

  export type CeldaWhereInput = {
    AND?: CeldaWhereInput | CeldaWhereInput[]
    OR?: CeldaWhereInput[]
    NOT?: CeldaWhereInput | CeldaWhereInput[]
    numero_celda?: IntFilter<"Celda"> | number
    tipoCelda?: StringFilter<"Celda"> | string
    descripcionCelda?: StringFilter<"Celda"> | string
    nivelSeguridad?: StringFilter<"Celda"> | string
    camarasSeguridad?: BoolFilter<"Celda"> | boolean
    sensoresMovimiento?: BoolFilter<"Celda"> | boolean
    alarmas?: BoolFilter<"Celda"> | boolean
    piso?: IntFilter<"Celda"> | number
    capacidad?: IntFilter<"Celda"> | number
    criminales?: CriminalListRelationFilter
  }

  export type CeldaOrderByWithRelationInput = {
    numero_celda?: SortOrder
    tipoCelda?: SortOrder
    descripcionCelda?: SortOrder
    nivelSeguridad?: SortOrder
    camarasSeguridad?: SortOrder
    sensoresMovimiento?: SortOrder
    alarmas?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
    criminales?: CriminalOrderByRelationAggregateInput
  }

  export type CeldaWhereUniqueInput = Prisma.AtLeast<{
    numero_celda?: number
    AND?: CeldaWhereInput | CeldaWhereInput[]
    OR?: CeldaWhereInput[]
    NOT?: CeldaWhereInput | CeldaWhereInput[]
    tipoCelda?: StringFilter<"Celda"> | string
    descripcionCelda?: StringFilter<"Celda"> | string
    nivelSeguridad?: StringFilter<"Celda"> | string
    camarasSeguridad?: BoolFilter<"Celda"> | boolean
    sensoresMovimiento?: BoolFilter<"Celda"> | boolean
    alarmas?: BoolFilter<"Celda"> | boolean
    piso?: IntFilter<"Celda"> | number
    capacidad?: IntFilter<"Celda"> | number
    criminales?: CriminalListRelationFilter
  }, "numero_celda">

  export type CeldaOrderByWithAggregationInput = {
    numero_celda?: SortOrder
    tipoCelda?: SortOrder
    descripcionCelda?: SortOrder
    nivelSeguridad?: SortOrder
    camarasSeguridad?: SortOrder
    sensoresMovimiento?: SortOrder
    alarmas?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
    _count?: CeldaCountOrderByAggregateInput
    _avg?: CeldaAvgOrderByAggregateInput
    _max?: CeldaMaxOrderByAggregateInput
    _min?: CeldaMinOrderByAggregateInput
    _sum?: CeldaSumOrderByAggregateInput
  }

  export type CeldaScalarWhereWithAggregatesInput = {
    AND?: CeldaScalarWhereWithAggregatesInput | CeldaScalarWhereWithAggregatesInput[]
    OR?: CeldaScalarWhereWithAggregatesInput[]
    NOT?: CeldaScalarWhereWithAggregatesInput | CeldaScalarWhereWithAggregatesInput[]
    numero_celda?: IntWithAggregatesFilter<"Celda"> | number
    tipoCelda?: StringWithAggregatesFilter<"Celda"> | string
    descripcionCelda?: StringWithAggregatesFilter<"Celda"> | string
    nivelSeguridad?: StringWithAggregatesFilter<"Celda"> | string
    camarasSeguridad?: BoolWithAggregatesFilter<"Celda"> | boolean
    sensoresMovimiento?: BoolWithAggregatesFilter<"Celda"> | boolean
    alarmas?: BoolWithAggregatesFilter<"Celda"> | boolean
    piso?: IntWithAggregatesFilter<"Celda"> | number
    capacidad?: IntWithAggregatesFilter<"Celda"> | number
  }

  export type CriminalCreateInput = {
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    foto?: string | null
    personal?: PersonalCreateNestedOneWithoutCriminalesInput
    delitos?: DelitoCreateNestedManyWithoutCriminalInput
    celda_info?: CeldaCreateNestedOneWithoutCriminalesInput
  }

  export type CriminalUncheckedCreateInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    personal_asignado?: number | null
    celda?: number | null
    foto?: string | null
    delitos?: DelitoUncheckedCreateNestedManyWithoutCriminalInput
  }

  export type CriminalUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    personal?: PersonalUpdateOneWithoutCriminalesNestedInput
    delitos?: DelitoUpdateManyWithoutCriminalNestedInput
    celda_info?: CeldaUpdateOneWithoutCriminalesNestedInput
  }

  export type CriminalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    personal_asignado?: NullableIntFieldUpdateOperationsInput | number | null
    celda?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    delitos?: DelitoUncheckedUpdateManyWithoutCriminalNestedInput
  }

  export type CriminalCreateManyInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    personal_asignado?: number | null
    celda?: number | null
    foto?: string | null
  }

  export type CriminalUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CriminalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    personal_asignado?: NullableIntFieldUpdateOperationsInput | number | null
    celda?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalCreateInput = {
    dni: number
    nombre: string
    rol: string
    turno: string
    contacto: string
    criminales?: CriminalCreateNestedManyWithoutPersonalInput
  }

  export type PersonalUncheckedCreateInput = {
    dni: number
    nombre: string
    rol: string
    turno: string
    contacto: string
    criminales?: CriminalUncheckedCreateNestedManyWithoutPersonalInput
  }

  export type PersonalUpdateInput = {
    dni?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    criminales?: CriminalUpdateManyWithoutPersonalNestedInput
  }

  export type PersonalUncheckedUpdateInput = {
    dni?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    criminales?: CriminalUncheckedUpdateManyWithoutPersonalNestedInput
  }

  export type PersonalCreateManyInput = {
    dni: number
    nombre: string
    rol: string
    turno: string
    contacto: string
  }

  export type PersonalUpdateManyMutationInput = {
    dni?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalUncheckedUpdateManyInput = {
    dni?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
  }

  export type DelitoCreateInput = {
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
    criminal: CriminalCreateNestedOneWithoutDelitosInput
  }

  export type DelitoUncheckedCreateInput = {
    numero_delito?: number
    criminal_id: number
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
  }

  export type DelitoUpdateInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
    criminal?: CriminalUpdateOneRequiredWithoutDelitosNestedInput
  }

  export type DelitoUncheckedUpdateInput = {
    numero_delito?: IntFieldUpdateOperationsInput | number
    criminal_id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
  }

  export type DelitoCreateManyInput = {
    numero_delito?: number
    criminal_id: number
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
  }

  export type DelitoUpdateManyMutationInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
  }

  export type DelitoUncheckedUpdateManyInput = {
    numero_delito?: IntFieldUpdateOperationsInput | number
    criminal_id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
  }

  export type CeldaCreateInput = {
    tipoCelda: string
    descripcionCelda: string
    nivelSeguridad: string
    camarasSeguridad: boolean
    sensoresMovimiento: boolean
    alarmas: boolean
    piso: number
    capacidad: number
    criminales?: CriminalCreateNestedManyWithoutCelda_infoInput
  }

  export type CeldaUncheckedCreateInput = {
    numero_celda?: number
    tipoCelda: string
    descripcionCelda: string
    nivelSeguridad: string
    camarasSeguridad: boolean
    sensoresMovimiento: boolean
    alarmas: boolean
    piso: number
    capacidad: number
    criminales?: CriminalUncheckedCreateNestedManyWithoutCelda_infoInput
  }

  export type CeldaUpdateInput = {
    tipoCelda?: StringFieldUpdateOperationsInput | string
    descripcionCelda?: StringFieldUpdateOperationsInput | string
    nivelSeguridad?: StringFieldUpdateOperationsInput | string
    camarasSeguridad?: BoolFieldUpdateOperationsInput | boolean
    sensoresMovimiento?: BoolFieldUpdateOperationsInput | boolean
    alarmas?: BoolFieldUpdateOperationsInput | boolean
    piso?: IntFieldUpdateOperationsInput | number
    capacidad?: IntFieldUpdateOperationsInput | number
    criminales?: CriminalUpdateManyWithoutCelda_infoNestedInput
  }

  export type CeldaUncheckedUpdateInput = {
    numero_celda?: IntFieldUpdateOperationsInput | number
    tipoCelda?: StringFieldUpdateOperationsInput | string
    descripcionCelda?: StringFieldUpdateOperationsInput | string
    nivelSeguridad?: StringFieldUpdateOperationsInput | string
    camarasSeguridad?: BoolFieldUpdateOperationsInput | boolean
    sensoresMovimiento?: BoolFieldUpdateOperationsInput | boolean
    alarmas?: BoolFieldUpdateOperationsInput | boolean
    piso?: IntFieldUpdateOperationsInput | number
    capacidad?: IntFieldUpdateOperationsInput | number
    criminales?: CriminalUncheckedUpdateManyWithoutCelda_infoNestedInput
  }

  export type CeldaCreateManyInput = {
    numero_celda?: number
    tipoCelda: string
    descripcionCelda: string
    nivelSeguridad: string
    camarasSeguridad: boolean
    sensoresMovimiento: boolean
    alarmas: boolean
    piso: number
    capacidad: number
  }

  export type CeldaUpdateManyMutationInput = {
    tipoCelda?: StringFieldUpdateOperationsInput | string
    descripcionCelda?: StringFieldUpdateOperationsInput | string
    nivelSeguridad?: StringFieldUpdateOperationsInput | string
    camarasSeguridad?: BoolFieldUpdateOperationsInput | boolean
    sensoresMovimiento?: BoolFieldUpdateOperationsInput | boolean
    alarmas?: BoolFieldUpdateOperationsInput | boolean
    piso?: IntFieldUpdateOperationsInput | number
    capacidad?: IntFieldUpdateOperationsInput | number
  }

  export type CeldaUncheckedUpdateManyInput = {
    numero_celda?: IntFieldUpdateOperationsInput | number
    tipoCelda?: StringFieldUpdateOperationsInput | string
    descripcionCelda?: StringFieldUpdateOperationsInput | string
    nivelSeguridad?: StringFieldUpdateOperationsInput | string
    camarasSeguridad?: BoolFieldUpdateOperationsInput | boolean
    sensoresMovimiento?: BoolFieldUpdateOperationsInput | boolean
    alarmas?: BoolFieldUpdateOperationsInput | boolean
    piso?: IntFieldUpdateOperationsInput | number
    capacidad?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PersonalNullableScalarRelationFilter = {
    is?: PersonalWhereInput | null
    isNot?: PersonalWhereInput | null
  }

  export type DelitoListRelationFilter = {
    every?: DelitoWhereInput
    some?: DelitoWhereInput
    none?: DelitoWhereInput
  }

  export type CeldaNullableScalarRelationFilter = {
    is?: CeldaWhereInput | null
    isNot?: CeldaWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DelitoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CriminalCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apodo?: SortOrder
    edad?: SortOrder
    genero?: SortOrder
    tratamiento?: SortOrder
    peligrosidad?: SortOrder
    personal_asignado?: SortOrder
    celda?: SortOrder
    foto?: SortOrder
  }

  export type CriminalAvgOrderByAggregateInput = {
    id?: SortOrder
    edad?: SortOrder
    personal_asignado?: SortOrder
    celda?: SortOrder
  }

  export type CriminalMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apodo?: SortOrder
    edad?: SortOrder
    genero?: SortOrder
    tratamiento?: SortOrder
    peligrosidad?: SortOrder
    personal_asignado?: SortOrder
    celda?: SortOrder
    foto?: SortOrder
  }

  export type CriminalMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apodo?: SortOrder
    edad?: SortOrder
    genero?: SortOrder
    tratamiento?: SortOrder
    peligrosidad?: SortOrder
    personal_asignado?: SortOrder
    celda?: SortOrder
    foto?: SortOrder
  }

  export type CriminalSumOrderByAggregateInput = {
    id?: SortOrder
    edad?: SortOrder
    personal_asignado?: SortOrder
    celda?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CriminalListRelationFilter = {
    every?: CriminalWhereInput
    some?: CriminalWhereInput
    none?: CriminalWhereInput
  }

  export type CriminalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonalCountOrderByAggregateInput = {
    dni?: SortOrder
    nombre?: SortOrder
    rol?: SortOrder
    turno?: SortOrder
    contacto?: SortOrder
  }

  export type PersonalAvgOrderByAggregateInput = {
    dni?: SortOrder
  }

  export type PersonalMaxOrderByAggregateInput = {
    dni?: SortOrder
    nombre?: SortOrder
    rol?: SortOrder
    turno?: SortOrder
    contacto?: SortOrder
  }

  export type PersonalMinOrderByAggregateInput = {
    dni?: SortOrder
    nombre?: SortOrder
    rol?: SortOrder
    turno?: SortOrder
    contacto?: SortOrder
  }

  export type PersonalSumOrderByAggregateInput = {
    dni?: SortOrder
  }

  export type CriminalScalarRelationFilter = {
    is?: CriminalWhereInput
    isNot?: CriminalWhereInput
  }

  export type DelitoCountOrderByAggregateInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    sentencia_judicial?: SortOrder
    lugarDelito?: SortOrder
    estadoDelito?: SortOrder
    nivelPrioridad?: SortOrder
  }

  export type DelitoAvgOrderByAggregateInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
  }

  export type DelitoMaxOrderByAggregateInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    sentencia_judicial?: SortOrder
    lugarDelito?: SortOrder
    estadoDelito?: SortOrder
    nivelPrioridad?: SortOrder
  }

  export type DelitoMinOrderByAggregateInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    sentencia_judicial?: SortOrder
    lugarDelito?: SortOrder
    estadoDelito?: SortOrder
    nivelPrioridad?: SortOrder
  }

  export type DelitoSumOrderByAggregateInput = {
    numero_delito?: SortOrder
    criminal_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CeldaCountOrderByAggregateInput = {
    numero_celda?: SortOrder
    tipoCelda?: SortOrder
    descripcionCelda?: SortOrder
    nivelSeguridad?: SortOrder
    camarasSeguridad?: SortOrder
    sensoresMovimiento?: SortOrder
    alarmas?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
  }

  export type CeldaAvgOrderByAggregateInput = {
    numero_celda?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
  }

  export type CeldaMaxOrderByAggregateInput = {
    numero_celda?: SortOrder
    tipoCelda?: SortOrder
    descripcionCelda?: SortOrder
    nivelSeguridad?: SortOrder
    camarasSeguridad?: SortOrder
    sensoresMovimiento?: SortOrder
    alarmas?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
  }

  export type CeldaMinOrderByAggregateInput = {
    numero_celda?: SortOrder
    tipoCelda?: SortOrder
    descripcionCelda?: SortOrder
    nivelSeguridad?: SortOrder
    camarasSeguridad?: SortOrder
    sensoresMovimiento?: SortOrder
    alarmas?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
  }

  export type CeldaSumOrderByAggregateInput = {
    numero_celda?: SortOrder
    piso?: SortOrder
    capacidad?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PersonalCreateNestedOneWithoutCriminalesInput = {
    create?: XOR<PersonalCreateWithoutCriminalesInput, PersonalUncheckedCreateWithoutCriminalesInput>
    connectOrCreate?: PersonalCreateOrConnectWithoutCriminalesInput
    connect?: PersonalWhereUniqueInput
  }

  export type DelitoCreateNestedManyWithoutCriminalInput = {
    create?: XOR<DelitoCreateWithoutCriminalInput, DelitoUncheckedCreateWithoutCriminalInput> | DelitoCreateWithoutCriminalInput[] | DelitoUncheckedCreateWithoutCriminalInput[]
    connectOrCreate?: DelitoCreateOrConnectWithoutCriminalInput | DelitoCreateOrConnectWithoutCriminalInput[]
    createMany?: DelitoCreateManyCriminalInputEnvelope
    connect?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
  }

  export type CeldaCreateNestedOneWithoutCriminalesInput = {
    create?: XOR<CeldaCreateWithoutCriminalesInput, CeldaUncheckedCreateWithoutCriminalesInput>
    connectOrCreate?: CeldaCreateOrConnectWithoutCriminalesInput
    connect?: CeldaWhereUniqueInput
  }

  export type DelitoUncheckedCreateNestedManyWithoutCriminalInput = {
    create?: XOR<DelitoCreateWithoutCriminalInput, DelitoUncheckedCreateWithoutCriminalInput> | DelitoCreateWithoutCriminalInput[] | DelitoUncheckedCreateWithoutCriminalInput[]
    connectOrCreate?: DelitoCreateOrConnectWithoutCriminalInput | DelitoCreateOrConnectWithoutCriminalInput[]
    createMany?: DelitoCreateManyCriminalInputEnvelope
    connect?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PersonalUpdateOneWithoutCriminalesNestedInput = {
    create?: XOR<PersonalCreateWithoutCriminalesInput, PersonalUncheckedCreateWithoutCriminalesInput>
    connectOrCreate?: PersonalCreateOrConnectWithoutCriminalesInput
    upsert?: PersonalUpsertWithoutCriminalesInput
    disconnect?: PersonalWhereInput | boolean
    delete?: PersonalWhereInput | boolean
    connect?: PersonalWhereUniqueInput
    update?: XOR<XOR<PersonalUpdateToOneWithWhereWithoutCriminalesInput, PersonalUpdateWithoutCriminalesInput>, PersonalUncheckedUpdateWithoutCriminalesInput>
  }

  export type DelitoUpdateManyWithoutCriminalNestedInput = {
    create?: XOR<DelitoCreateWithoutCriminalInput, DelitoUncheckedCreateWithoutCriminalInput> | DelitoCreateWithoutCriminalInput[] | DelitoUncheckedCreateWithoutCriminalInput[]
    connectOrCreate?: DelitoCreateOrConnectWithoutCriminalInput | DelitoCreateOrConnectWithoutCriminalInput[]
    upsert?: DelitoUpsertWithWhereUniqueWithoutCriminalInput | DelitoUpsertWithWhereUniqueWithoutCriminalInput[]
    createMany?: DelitoCreateManyCriminalInputEnvelope
    set?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    disconnect?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    delete?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    connect?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    update?: DelitoUpdateWithWhereUniqueWithoutCriminalInput | DelitoUpdateWithWhereUniqueWithoutCriminalInput[]
    updateMany?: DelitoUpdateManyWithWhereWithoutCriminalInput | DelitoUpdateManyWithWhereWithoutCriminalInput[]
    deleteMany?: DelitoScalarWhereInput | DelitoScalarWhereInput[]
  }

  export type CeldaUpdateOneWithoutCriminalesNestedInput = {
    create?: XOR<CeldaCreateWithoutCriminalesInput, CeldaUncheckedCreateWithoutCriminalesInput>
    connectOrCreate?: CeldaCreateOrConnectWithoutCriminalesInput
    upsert?: CeldaUpsertWithoutCriminalesInput
    disconnect?: CeldaWhereInput | boolean
    delete?: CeldaWhereInput | boolean
    connect?: CeldaWhereUniqueInput
    update?: XOR<XOR<CeldaUpdateToOneWithWhereWithoutCriminalesInput, CeldaUpdateWithoutCriminalesInput>, CeldaUncheckedUpdateWithoutCriminalesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DelitoUncheckedUpdateManyWithoutCriminalNestedInput = {
    create?: XOR<DelitoCreateWithoutCriminalInput, DelitoUncheckedCreateWithoutCriminalInput> | DelitoCreateWithoutCriminalInput[] | DelitoUncheckedCreateWithoutCriminalInput[]
    connectOrCreate?: DelitoCreateOrConnectWithoutCriminalInput | DelitoCreateOrConnectWithoutCriminalInput[]
    upsert?: DelitoUpsertWithWhereUniqueWithoutCriminalInput | DelitoUpsertWithWhereUniqueWithoutCriminalInput[]
    createMany?: DelitoCreateManyCriminalInputEnvelope
    set?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    disconnect?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    delete?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    connect?: DelitoWhereUniqueInput | DelitoWhereUniqueInput[]
    update?: DelitoUpdateWithWhereUniqueWithoutCriminalInput | DelitoUpdateWithWhereUniqueWithoutCriminalInput[]
    updateMany?: DelitoUpdateManyWithWhereWithoutCriminalInput | DelitoUpdateManyWithWhereWithoutCriminalInput[]
    deleteMany?: DelitoScalarWhereInput | DelitoScalarWhereInput[]
  }

  export type CriminalCreateNestedManyWithoutPersonalInput = {
    create?: XOR<CriminalCreateWithoutPersonalInput, CriminalUncheckedCreateWithoutPersonalInput> | CriminalCreateWithoutPersonalInput[] | CriminalUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutPersonalInput | CriminalCreateOrConnectWithoutPersonalInput[]
    createMany?: CriminalCreateManyPersonalInputEnvelope
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
  }

  export type CriminalUncheckedCreateNestedManyWithoutPersonalInput = {
    create?: XOR<CriminalCreateWithoutPersonalInput, CriminalUncheckedCreateWithoutPersonalInput> | CriminalCreateWithoutPersonalInput[] | CriminalUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutPersonalInput | CriminalCreateOrConnectWithoutPersonalInput[]
    createMany?: CriminalCreateManyPersonalInputEnvelope
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
  }

  export type CriminalUpdateManyWithoutPersonalNestedInput = {
    create?: XOR<CriminalCreateWithoutPersonalInput, CriminalUncheckedCreateWithoutPersonalInput> | CriminalCreateWithoutPersonalInput[] | CriminalUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutPersonalInput | CriminalCreateOrConnectWithoutPersonalInput[]
    upsert?: CriminalUpsertWithWhereUniqueWithoutPersonalInput | CriminalUpsertWithWhereUniqueWithoutPersonalInput[]
    createMany?: CriminalCreateManyPersonalInputEnvelope
    set?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    disconnect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    delete?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    update?: CriminalUpdateWithWhereUniqueWithoutPersonalInput | CriminalUpdateWithWhereUniqueWithoutPersonalInput[]
    updateMany?: CriminalUpdateManyWithWhereWithoutPersonalInput | CriminalUpdateManyWithWhereWithoutPersonalInput[]
    deleteMany?: CriminalScalarWhereInput | CriminalScalarWhereInput[]
  }

  export type CriminalUncheckedUpdateManyWithoutPersonalNestedInput = {
    create?: XOR<CriminalCreateWithoutPersonalInput, CriminalUncheckedCreateWithoutPersonalInput> | CriminalCreateWithoutPersonalInput[] | CriminalUncheckedCreateWithoutPersonalInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutPersonalInput | CriminalCreateOrConnectWithoutPersonalInput[]
    upsert?: CriminalUpsertWithWhereUniqueWithoutPersonalInput | CriminalUpsertWithWhereUniqueWithoutPersonalInput[]
    createMany?: CriminalCreateManyPersonalInputEnvelope
    set?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    disconnect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    delete?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    update?: CriminalUpdateWithWhereUniqueWithoutPersonalInput | CriminalUpdateWithWhereUniqueWithoutPersonalInput[]
    updateMany?: CriminalUpdateManyWithWhereWithoutPersonalInput | CriminalUpdateManyWithWhereWithoutPersonalInput[]
    deleteMany?: CriminalScalarWhereInput | CriminalScalarWhereInput[]
  }

  export type CriminalCreateNestedOneWithoutDelitosInput = {
    create?: XOR<CriminalCreateWithoutDelitosInput, CriminalUncheckedCreateWithoutDelitosInput>
    connectOrCreate?: CriminalCreateOrConnectWithoutDelitosInput
    connect?: CriminalWhereUniqueInput
  }

  export type CriminalUpdateOneRequiredWithoutDelitosNestedInput = {
    create?: XOR<CriminalCreateWithoutDelitosInput, CriminalUncheckedCreateWithoutDelitosInput>
    connectOrCreate?: CriminalCreateOrConnectWithoutDelitosInput
    upsert?: CriminalUpsertWithoutDelitosInput
    connect?: CriminalWhereUniqueInput
    update?: XOR<XOR<CriminalUpdateToOneWithWhereWithoutDelitosInput, CriminalUpdateWithoutDelitosInput>, CriminalUncheckedUpdateWithoutDelitosInput>
  }

  export type CriminalCreateNestedManyWithoutCelda_infoInput = {
    create?: XOR<CriminalCreateWithoutCelda_infoInput, CriminalUncheckedCreateWithoutCelda_infoInput> | CriminalCreateWithoutCelda_infoInput[] | CriminalUncheckedCreateWithoutCelda_infoInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutCelda_infoInput | CriminalCreateOrConnectWithoutCelda_infoInput[]
    createMany?: CriminalCreateManyCelda_infoInputEnvelope
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
  }

  export type CriminalUncheckedCreateNestedManyWithoutCelda_infoInput = {
    create?: XOR<CriminalCreateWithoutCelda_infoInput, CriminalUncheckedCreateWithoutCelda_infoInput> | CriminalCreateWithoutCelda_infoInput[] | CriminalUncheckedCreateWithoutCelda_infoInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutCelda_infoInput | CriminalCreateOrConnectWithoutCelda_infoInput[]
    createMany?: CriminalCreateManyCelda_infoInputEnvelope
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CriminalUpdateManyWithoutCelda_infoNestedInput = {
    create?: XOR<CriminalCreateWithoutCelda_infoInput, CriminalUncheckedCreateWithoutCelda_infoInput> | CriminalCreateWithoutCelda_infoInput[] | CriminalUncheckedCreateWithoutCelda_infoInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutCelda_infoInput | CriminalCreateOrConnectWithoutCelda_infoInput[]
    upsert?: CriminalUpsertWithWhereUniqueWithoutCelda_infoInput | CriminalUpsertWithWhereUniqueWithoutCelda_infoInput[]
    createMany?: CriminalCreateManyCelda_infoInputEnvelope
    set?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    disconnect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    delete?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    update?: CriminalUpdateWithWhereUniqueWithoutCelda_infoInput | CriminalUpdateWithWhereUniqueWithoutCelda_infoInput[]
    updateMany?: CriminalUpdateManyWithWhereWithoutCelda_infoInput | CriminalUpdateManyWithWhereWithoutCelda_infoInput[]
    deleteMany?: CriminalScalarWhereInput | CriminalScalarWhereInput[]
  }

  export type CriminalUncheckedUpdateManyWithoutCelda_infoNestedInput = {
    create?: XOR<CriminalCreateWithoutCelda_infoInput, CriminalUncheckedCreateWithoutCelda_infoInput> | CriminalCreateWithoutCelda_infoInput[] | CriminalUncheckedCreateWithoutCelda_infoInput[]
    connectOrCreate?: CriminalCreateOrConnectWithoutCelda_infoInput | CriminalCreateOrConnectWithoutCelda_infoInput[]
    upsert?: CriminalUpsertWithWhereUniqueWithoutCelda_infoInput | CriminalUpsertWithWhereUniqueWithoutCelda_infoInput[]
    createMany?: CriminalCreateManyCelda_infoInputEnvelope
    set?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    disconnect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    delete?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    connect?: CriminalWhereUniqueInput | CriminalWhereUniqueInput[]
    update?: CriminalUpdateWithWhereUniqueWithoutCelda_infoInput | CriminalUpdateWithWhereUniqueWithoutCelda_infoInput[]
    updateMany?: CriminalUpdateManyWithWhereWithoutCelda_infoInput | CriminalUpdateManyWithWhereWithoutCelda_infoInput[]
    deleteMany?: CriminalScalarWhereInput | CriminalScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PersonalCreateWithoutCriminalesInput = {
    dni: number
    nombre: string
    rol: string
    turno: string
    contacto: string
  }

  export type PersonalUncheckedCreateWithoutCriminalesInput = {
    dni: number
    nombre: string
    rol: string
    turno: string
    contacto: string
  }

  export type PersonalCreateOrConnectWithoutCriminalesInput = {
    where: PersonalWhereUniqueInput
    create: XOR<PersonalCreateWithoutCriminalesInput, PersonalUncheckedCreateWithoutCriminalesInput>
  }

  export type DelitoCreateWithoutCriminalInput = {
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
  }

  export type DelitoUncheckedCreateWithoutCriminalInput = {
    numero_delito?: number
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
  }

  export type DelitoCreateOrConnectWithoutCriminalInput = {
    where: DelitoWhereUniqueInput
    create: XOR<DelitoCreateWithoutCriminalInput, DelitoUncheckedCreateWithoutCriminalInput>
  }

  export type DelitoCreateManyCriminalInputEnvelope = {
    data: DelitoCreateManyCriminalInput | DelitoCreateManyCriminalInput[]
    skipDuplicates?: boolean
  }

  export type CeldaCreateWithoutCriminalesInput = {
    tipoCelda: string
    descripcionCelda: string
    nivelSeguridad: string
    camarasSeguridad: boolean
    sensoresMovimiento: boolean
    alarmas: boolean
    piso: number
    capacidad: number
  }

  export type CeldaUncheckedCreateWithoutCriminalesInput = {
    numero_celda?: number
    tipoCelda: string
    descripcionCelda: string
    nivelSeguridad: string
    camarasSeguridad: boolean
    sensoresMovimiento: boolean
    alarmas: boolean
    piso: number
    capacidad: number
  }

  export type CeldaCreateOrConnectWithoutCriminalesInput = {
    where: CeldaWhereUniqueInput
    create: XOR<CeldaCreateWithoutCriminalesInput, CeldaUncheckedCreateWithoutCriminalesInput>
  }

  export type PersonalUpsertWithoutCriminalesInput = {
    update: XOR<PersonalUpdateWithoutCriminalesInput, PersonalUncheckedUpdateWithoutCriminalesInput>
    create: XOR<PersonalCreateWithoutCriminalesInput, PersonalUncheckedCreateWithoutCriminalesInput>
    where?: PersonalWhereInput
  }

  export type PersonalUpdateToOneWithWhereWithoutCriminalesInput = {
    where?: PersonalWhereInput
    data: XOR<PersonalUpdateWithoutCriminalesInput, PersonalUncheckedUpdateWithoutCriminalesInput>
  }

  export type PersonalUpdateWithoutCriminalesInput = {
    dni?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalUncheckedUpdateWithoutCriminalesInput = {
    dni?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
  }

  export type DelitoUpsertWithWhereUniqueWithoutCriminalInput = {
    where: DelitoWhereUniqueInput
    update: XOR<DelitoUpdateWithoutCriminalInput, DelitoUncheckedUpdateWithoutCriminalInput>
    create: XOR<DelitoCreateWithoutCriminalInput, DelitoUncheckedCreateWithoutCriminalInput>
  }

  export type DelitoUpdateWithWhereUniqueWithoutCriminalInput = {
    where: DelitoWhereUniqueInput
    data: XOR<DelitoUpdateWithoutCriminalInput, DelitoUncheckedUpdateWithoutCriminalInput>
  }

  export type DelitoUpdateManyWithWhereWithoutCriminalInput = {
    where: DelitoScalarWhereInput
    data: XOR<DelitoUpdateManyMutationInput, DelitoUncheckedUpdateManyWithoutCriminalInput>
  }

  export type DelitoScalarWhereInput = {
    AND?: DelitoScalarWhereInput | DelitoScalarWhereInput[]
    OR?: DelitoScalarWhereInput[]
    NOT?: DelitoScalarWhereInput | DelitoScalarWhereInput[]
    numero_delito?: IntFilter<"Delito"> | number
    criminal_id?: IntFilter<"Delito"> | number
    descripcion?: StringFilter<"Delito"> | string
    fecha?: StringFilter<"Delito"> | string
    sentencia_judicial?: StringFilter<"Delito"> | string
    lugarDelito?: StringFilter<"Delito"> | string
    estadoDelito?: StringFilter<"Delito"> | string
    nivelPrioridad?: StringFilter<"Delito"> | string
  }

  export type CeldaUpsertWithoutCriminalesInput = {
    update: XOR<CeldaUpdateWithoutCriminalesInput, CeldaUncheckedUpdateWithoutCriminalesInput>
    create: XOR<CeldaCreateWithoutCriminalesInput, CeldaUncheckedCreateWithoutCriminalesInput>
    where?: CeldaWhereInput
  }

  export type CeldaUpdateToOneWithWhereWithoutCriminalesInput = {
    where?: CeldaWhereInput
    data: XOR<CeldaUpdateWithoutCriminalesInput, CeldaUncheckedUpdateWithoutCriminalesInput>
  }

  export type CeldaUpdateWithoutCriminalesInput = {
    tipoCelda?: StringFieldUpdateOperationsInput | string
    descripcionCelda?: StringFieldUpdateOperationsInput | string
    nivelSeguridad?: StringFieldUpdateOperationsInput | string
    camarasSeguridad?: BoolFieldUpdateOperationsInput | boolean
    sensoresMovimiento?: BoolFieldUpdateOperationsInput | boolean
    alarmas?: BoolFieldUpdateOperationsInput | boolean
    piso?: IntFieldUpdateOperationsInput | number
    capacidad?: IntFieldUpdateOperationsInput | number
  }

  export type CeldaUncheckedUpdateWithoutCriminalesInput = {
    numero_celda?: IntFieldUpdateOperationsInput | number
    tipoCelda?: StringFieldUpdateOperationsInput | string
    descripcionCelda?: StringFieldUpdateOperationsInput | string
    nivelSeguridad?: StringFieldUpdateOperationsInput | string
    camarasSeguridad?: BoolFieldUpdateOperationsInput | boolean
    sensoresMovimiento?: BoolFieldUpdateOperationsInput | boolean
    alarmas?: BoolFieldUpdateOperationsInput | boolean
    piso?: IntFieldUpdateOperationsInput | number
    capacidad?: IntFieldUpdateOperationsInput | number
  }

  export type CriminalCreateWithoutPersonalInput = {
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    foto?: string | null
    delitos?: DelitoCreateNestedManyWithoutCriminalInput
    celda_info?: CeldaCreateNestedOneWithoutCriminalesInput
  }

  export type CriminalUncheckedCreateWithoutPersonalInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    celda?: number | null
    foto?: string | null
    delitos?: DelitoUncheckedCreateNestedManyWithoutCriminalInput
  }

  export type CriminalCreateOrConnectWithoutPersonalInput = {
    where: CriminalWhereUniqueInput
    create: XOR<CriminalCreateWithoutPersonalInput, CriminalUncheckedCreateWithoutPersonalInput>
  }

  export type CriminalCreateManyPersonalInputEnvelope = {
    data: CriminalCreateManyPersonalInput | CriminalCreateManyPersonalInput[]
    skipDuplicates?: boolean
  }

  export type CriminalUpsertWithWhereUniqueWithoutPersonalInput = {
    where: CriminalWhereUniqueInput
    update: XOR<CriminalUpdateWithoutPersonalInput, CriminalUncheckedUpdateWithoutPersonalInput>
    create: XOR<CriminalCreateWithoutPersonalInput, CriminalUncheckedCreateWithoutPersonalInput>
  }

  export type CriminalUpdateWithWhereUniqueWithoutPersonalInput = {
    where: CriminalWhereUniqueInput
    data: XOR<CriminalUpdateWithoutPersonalInput, CriminalUncheckedUpdateWithoutPersonalInput>
  }

  export type CriminalUpdateManyWithWhereWithoutPersonalInput = {
    where: CriminalScalarWhereInput
    data: XOR<CriminalUpdateManyMutationInput, CriminalUncheckedUpdateManyWithoutPersonalInput>
  }

  export type CriminalScalarWhereInput = {
    AND?: CriminalScalarWhereInput | CriminalScalarWhereInput[]
    OR?: CriminalScalarWhereInput[]
    NOT?: CriminalScalarWhereInput | CriminalScalarWhereInput[]
    id?: IntFilter<"Criminal"> | number
    nombre?: StringFilter<"Criminal"> | string
    apodo?: StringFilter<"Criminal"> | string
    edad?: IntFilter<"Criminal"> | number
    genero?: StringFilter<"Criminal"> | string
    tratamiento?: StringFilter<"Criminal"> | string
    peligrosidad?: StringFilter<"Criminal"> | string
    personal_asignado?: IntNullableFilter<"Criminal"> | number | null
    celda?: IntNullableFilter<"Criminal"> | number | null
    foto?: StringNullableFilter<"Criminal"> | string | null
  }

  export type CriminalCreateWithoutDelitosInput = {
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    foto?: string | null
    personal?: PersonalCreateNestedOneWithoutCriminalesInput
    celda_info?: CeldaCreateNestedOneWithoutCriminalesInput
  }

  export type CriminalUncheckedCreateWithoutDelitosInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    personal_asignado?: number | null
    celda?: number | null
    foto?: string | null
  }

  export type CriminalCreateOrConnectWithoutDelitosInput = {
    where: CriminalWhereUniqueInput
    create: XOR<CriminalCreateWithoutDelitosInput, CriminalUncheckedCreateWithoutDelitosInput>
  }

  export type CriminalUpsertWithoutDelitosInput = {
    update: XOR<CriminalUpdateWithoutDelitosInput, CriminalUncheckedUpdateWithoutDelitosInput>
    create: XOR<CriminalCreateWithoutDelitosInput, CriminalUncheckedCreateWithoutDelitosInput>
    where?: CriminalWhereInput
  }

  export type CriminalUpdateToOneWithWhereWithoutDelitosInput = {
    where?: CriminalWhereInput
    data: XOR<CriminalUpdateWithoutDelitosInput, CriminalUncheckedUpdateWithoutDelitosInput>
  }

  export type CriminalUpdateWithoutDelitosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    personal?: PersonalUpdateOneWithoutCriminalesNestedInput
    celda_info?: CeldaUpdateOneWithoutCriminalesNestedInput
  }

  export type CriminalUncheckedUpdateWithoutDelitosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    personal_asignado?: NullableIntFieldUpdateOperationsInput | number | null
    celda?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CriminalCreateWithoutCelda_infoInput = {
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    foto?: string | null
    personal?: PersonalCreateNestedOneWithoutCriminalesInput
    delitos?: DelitoCreateNestedManyWithoutCriminalInput
  }

  export type CriminalUncheckedCreateWithoutCelda_infoInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    personal_asignado?: number | null
    foto?: string | null
    delitos?: DelitoUncheckedCreateNestedManyWithoutCriminalInput
  }

  export type CriminalCreateOrConnectWithoutCelda_infoInput = {
    where: CriminalWhereUniqueInput
    create: XOR<CriminalCreateWithoutCelda_infoInput, CriminalUncheckedCreateWithoutCelda_infoInput>
  }

  export type CriminalCreateManyCelda_infoInputEnvelope = {
    data: CriminalCreateManyCelda_infoInput | CriminalCreateManyCelda_infoInput[]
    skipDuplicates?: boolean
  }

  export type CriminalUpsertWithWhereUniqueWithoutCelda_infoInput = {
    where: CriminalWhereUniqueInput
    update: XOR<CriminalUpdateWithoutCelda_infoInput, CriminalUncheckedUpdateWithoutCelda_infoInput>
    create: XOR<CriminalCreateWithoutCelda_infoInput, CriminalUncheckedCreateWithoutCelda_infoInput>
  }

  export type CriminalUpdateWithWhereUniqueWithoutCelda_infoInput = {
    where: CriminalWhereUniqueInput
    data: XOR<CriminalUpdateWithoutCelda_infoInput, CriminalUncheckedUpdateWithoutCelda_infoInput>
  }

  export type CriminalUpdateManyWithWhereWithoutCelda_infoInput = {
    where: CriminalScalarWhereInput
    data: XOR<CriminalUpdateManyMutationInput, CriminalUncheckedUpdateManyWithoutCelda_infoInput>
  }

  export type DelitoCreateManyCriminalInput = {
    numero_delito?: number
    descripcion: string
    fecha: string
    sentencia_judicial: string
    lugarDelito: string
    estadoDelito: string
    nivelPrioridad: string
  }

  export type DelitoUpdateWithoutCriminalInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
  }

  export type DelitoUncheckedUpdateWithoutCriminalInput = {
    numero_delito?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
  }

  export type DelitoUncheckedUpdateManyWithoutCriminalInput = {
    numero_delito?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: StringFieldUpdateOperationsInput | string
    sentencia_judicial?: StringFieldUpdateOperationsInput | string
    lugarDelito?: StringFieldUpdateOperationsInput | string
    estadoDelito?: StringFieldUpdateOperationsInput | string
    nivelPrioridad?: StringFieldUpdateOperationsInput | string
  }

  export type CriminalCreateManyPersonalInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    celda?: number | null
    foto?: string | null
  }

  export type CriminalUpdateWithoutPersonalInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    delitos?: DelitoUpdateManyWithoutCriminalNestedInput
    celda_info?: CeldaUpdateOneWithoutCriminalesNestedInput
  }

  export type CriminalUncheckedUpdateWithoutPersonalInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    celda?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    delitos?: DelitoUncheckedUpdateManyWithoutCriminalNestedInput
  }

  export type CriminalUncheckedUpdateManyWithoutPersonalInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    celda?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CriminalCreateManyCelda_infoInput = {
    id?: number
    nombre: string
    apodo: string
    edad: number
    genero: string
    tratamiento: string
    peligrosidad: string
    personal_asignado?: number | null
    foto?: string | null
  }

  export type CriminalUpdateWithoutCelda_infoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    personal?: PersonalUpdateOneWithoutCriminalesNestedInput
    delitos?: DelitoUpdateManyWithoutCriminalNestedInput
  }

  export type CriminalUncheckedUpdateWithoutCelda_infoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    personal_asignado?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    delitos?: DelitoUncheckedUpdateManyWithoutCriminalNestedInput
  }

  export type CriminalUncheckedUpdateManyWithoutCelda_infoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apodo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    tratamiento?: StringFieldUpdateOperationsInput | string
    peligrosidad?: StringFieldUpdateOperationsInput | string
    personal_asignado?: NullableIntFieldUpdateOperationsInput | number | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}